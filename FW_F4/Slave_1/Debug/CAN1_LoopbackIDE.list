
CAN1_LoopbackIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004158  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f8  080042f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004300  08004300  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000188  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d802  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020d6  00000000  00000000  0002d881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d10  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a19  00000000  00000000  00030668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000222fa  00000000  00000000  00031081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ed49  00000000  00000000  0005337b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d71bf  00000000  00000000  000620c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000370c  00000000  00000000  00139284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0013c990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042c8 	.word	0x080042c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080042c8 	.word	0x080042c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004c8:	f3bf 8f4f 	dsb	sy
}
 80004cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <__NVIC_SystemReset+0x24>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004d6:	4904      	ldr	r1, [pc, #16]	; (80004e8 <__NVIC_SystemReset+0x24>)
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <__NVIC_SystemReset+0x28>)
 80004da:	4313      	orrs	r3, r2
 80004dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004de:	f3bf 8f4f 	dsb	sy
}
 80004e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <__NVIC_SystemReset+0x20>
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	05fa0004 	.word	0x05fa0004

080004f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t datacheck = 0, count = 0;
uint16_t adc_val = 0, adc_buff = 0, CanRx_ADC_val = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80004f8:	4b30      	ldr	r3, [pc, #192]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80004fa:	4a31      	ldr	r2, [pc, #196]	; (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	4831      	ldr	r0, [pc, #196]	; (80005c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000500:	f001 fc9f 	bl	8001e42 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2)
 8000504:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8000506:	691b      	ldr	r3, [r3, #16]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d102      	bne.n	8000512 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck = 1;
 800050c:	4b2e      	ldr	r3, [pc, #184]	; (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
//		CanRx_ADC_val = (uint16_t)((RxData[0]<<8) + RxData[1]);
//		datacheck = 0;
//	}

	/* On/OFF LEDs functions */
	if (datacheck)
 8000512:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d04b      	beq.n	80005b2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
	{
		if ((RxData[0] & 0b1000) != 0)	//Green LED - ON
 800051a:	4b28      	ldr	r3, [pc, #160]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	f003 0308 	and.w	r3, r3, #8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d006      	beq.n	8000534 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052c:	4827      	ldr	r0, [pc, #156]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800052e:	f002 fd87 	bl	8003040 <HAL_GPIO_WritePin>
 8000532:	e005      	b.n	8000540 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
		else
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	4824      	ldr	r0, [pc, #144]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800053c:	f002 fd80 	bl	8003040 <HAL_GPIO_WritePin>

		if ((RxData[0] & 0b0100) != 0)	//Orange LED - ON
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	2b00      	cmp	r3, #0
 800054a:	d006      	beq.n	800055a <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000552:	481e      	ldr	r0, [pc, #120]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000554:	f002 fd74 	bl	8003040 <HAL_GPIO_WritePin>
 8000558:	e005      	b.n	8000566 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
		else
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000560:	481a      	ldr	r0, [pc, #104]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000562:	f002 fd6d 	bl	8003040 <HAL_GPIO_WritePin>

		if ((RxData[0] & 0b0010) != 0)	//Red LED - ON
 8000566:	4b15      	ldr	r3, [pc, #84]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d006      	beq.n	8000580 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000578:	4814      	ldr	r0, [pc, #80]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800057a:	f002 fd61 	bl	8003040 <HAL_GPIO_WritePin>
 800057e:	e005      	b.n	800058c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
		else
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000586:	4811      	ldr	r0, [pc, #68]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000588:	f002 fd5a 	bl	8003040 <HAL_GPIO_WritePin>

		if ((RxData[0] & 0b0001) != 0)	//Blue LED - ON
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f003 0301 	and.w	r3, r3, #1
 8000594:	2b00      	cmp	r3, #0
 8000596:	d006      	beq.n	80005a6 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059e:	480b      	ldr	r0, [pc, #44]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80005a0:	f002 fd4e 	bl	8003040 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
	}

}
 80005a4:	e005      	b.n	80005b2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80005ae:	f002 fd47 	bl	8003040 <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000180 	.word	0x20000180
 80005c0:	20000158 	.word	0x20000158
 80005c4:	200000d0 	.word	0x200000d0
 80005c8:	20000188 	.word	0x20000188
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
//		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
//		{
//		  Error_Handler();
//		}
//	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
/* for INTERRUPT uncomment the line below */
	adc_buff = HAL_ADC_GetValue(&hadc1);
 80005f0:	4806      	ldr	r0, [pc, #24]	; (800060c <HAL_ADC_ConvCpltCallback+0x24>)
 80005f2:	f000 fee1 	bl	80013b8 <HAL_ADC_GetValue>
 80005f6:	4603      	mov	r3, r0
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <HAL_ADC_ConvCpltCallback+0x28>)
 80005fc:	801a      	strh	r2, [r3, #0]

/*If continuousconversion mode is DISABLED uncomment below*/
	HAL_ADC_Start_IT (&hadc1);
 80005fe:	4803      	ldr	r0, [pc, #12]	; (800060c <HAL_ADC_ConvCpltCallback+0x24>)
 8000600:	f000 fcec 	bl	8000fdc <HAL_ADC_Start_IT>
/* for DMA uncomment the line below */
//		adc_val = adc_buff;



}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000028 	.word	0x20000028
 8000610:	2000018c 	.word	0x2000018c

08000614 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	//if (TIM_cnt++ == 2)
	//{
		//NVIC_SystemReset();
		//TIM_cnt = 0;
	//}
	adc_val = adc_buff;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800061e:	881a      	ldrh	r2, [r3, #0]
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000622:	801a      	strh	r2, [r3, #0]

	TxData[0] = (uint8_t)((adc_val & 0xFF00) >> 8);
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	b29b      	uxth	r3, r3
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000630:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)((adc_val & 0x00FF) >> 0);
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800063a:	705a      	strb	r2, [r3, #1]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800063e:	4a09      	ldr	r2, [pc, #36]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000640:	490a      	ldr	r1, [pc, #40]	; (800066c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000642:	480b      	ldr	r0, [pc, #44]	; (8000670 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000644:	f001 fb22 	bl	8001c8c <HAL_CAN_AddTxMessage>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		NVIC_SystemReset();;
 800064e:	f7ff ff39 	bl	80004c4 <__NVIC_SystemReset>
//		CAN_TX_count++;
//	}
//	else
//		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);

}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000018c 	.word	0x2000018c
 8000660:	2000018a 	.word	0x2000018a
 8000664:	20000178 	.word	0x20000178
 8000668:	20000174 	.word	0x20000174
 800066c:	20000140 	.word	0x20000140
 8000670:	200000d0 	.word	0x200000d0

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000678:	f000 fbfa 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067c:	f000 f830 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000680:	f000 f9b0 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000684:	f000 f98e 	bl	80009a4 <MX_DMA_Init>
  MX_CAN1_Init();
 8000688:	f000 f8e6 	bl	8000858 <MX_CAN1_Init>
  MX_ADC1_Init();
 800068c:	f000 f892 	bl	80007b4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000690:	f000 f936 	bl	8000900 <MX_TIM1_Init>

  /* ADC Start Function */
  /* DMA MODE */
//  HAL_ADC_Start_DMA (&hadc1, (uint32_t *)&adc_buff, 1);
  /* INTERRUPT MODE */
  HAL_ADC_Start_IT (&hadc1);
 8000694:	480e      	ldr	r0, [pc, #56]	; (80006d0 <main+0x5c>)
 8000696:	f000 fca1 	bl	8000fdc <HAL_ADC_Start_IT>

  /* Timer Start Function */
  HAL_TIM_Base_Start_IT(&htim1);
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <main+0x60>)
 800069c:	f003 f9b6 	bl	8003a0c <HAL_TIM_Base_Start_IT>

  /* CAN Start Function */

  HAL_CAN_Start(&hcan1);
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0x64>)
 80006a2:	f001 faaf 	bl	8001c04 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006a6:	2102      	movs	r1, #2
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <main+0x64>)
 80006aa:	f001 fcdc 	bl	8002066 <HAL_CAN_ActivateNotification>

  TxHeader.DLC = 2;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <main+0x68>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <main+0x68>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <main+0x68>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <main+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x0B;
 80006c6:	4b05      	ldr	r3, [pc, #20]	; (80006dc <main+0x68>)
 80006c8:	220b      	movs	r2, #11
 80006ca:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <main+0x58>
 80006ce:	bf00      	nop
 80006d0:	20000028 	.word	0x20000028
 80006d4:	200000f8 	.word	0x200000f8
 80006d8:	200000d0 	.word	0x200000d0
 80006dc:	20000140 	.word	0x20000140

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 fdbe 	bl	8004270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <SystemClock_Config+0xcc>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd0>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800073c:	2301      	movs	r3, #1
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000754:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075a:	2302      	movs	r3, #2
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075e:	2304      	movs	r3, #4
 8000760:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fc9c 	bl	80030a4 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000772:	f000 f9af 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2302      	movs	r3, #2
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000786:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2105      	movs	r1, #5
 8000794:	4618      	mov	r0, r3
 8000796:	f002 fefd 	bl	8003594 <HAL_RCC_ClockConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007a0:	f000 f998 	bl	8000ad4 <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3750      	adds	r7, #80	; 0x50
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_ADC1_Init+0x98>)
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <MX_ADC1_Init+0x9c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ADC1_Init+0x98>)
 80007ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	; (800084c <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_ADC1_Init+0x98>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_ADC1_Init+0x98>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ADC1_Init+0x98>)
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_ADC1_Init+0xa0>)
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_ADC1_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_ADC1_Init+0x98>)
 8000802:	2201      	movs	r2, #1
 8000804:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_ADC1_Init+0x98>)
 8000808:	2201      	movs	r2, #1
 800080a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ADC1_Init+0x98>)
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <MX_ADC1_Init+0x98>)
 8000816:	f000 fb9d 	bl	8000f54 <HAL_ADC_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000820:	f000 f958 	bl	8000ad4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000824:	2301      	movs	r3, #1
 8000826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000830:	463b      	mov	r3, r7
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_ADC1_Init+0x98>)
 8000836:	f000 fde1 	bl	80013fc <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000840:	f000 f948 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000028 	.word	0x20000028
 8000850:	40012000 	.word	0x40012000
 8000854:	0f000001 	.word	0x0f000001

08000858 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000860:	4a26      	ldr	r2, [pc, #152]	; (80008fc <MX_CAN1_Init+0xa4>)
 8000862:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000864:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000866:	2215      	movs	r2, #21
 8000868:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <MX_CAN1_Init+0xa0>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000870:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000878:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800087c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000880:	2200      	movs	r2, #0
 8000882:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000886:	2200      	movs	r2, #0
 8000888:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_CAN1_Init+0xa0>)
 800088c:	2200      	movs	r2, #0
 800088e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000892:	2200      	movs	r2, #0
 8000894:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_CAN1_Init+0xa0>)
 8000898:	2201      	movs	r2, #1
 800089a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_CAN1_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_CAN1_Init+0xa0>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <MX_CAN1_Init+0xa0>)
 80008aa:	f000 ffcf 	bl	800184c <HAL_CAN_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80008b4:	f000 f90e 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 80008bc:	230a      	movs	r3, #10
 80008be:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x0A<<5;											/******************/
 80008c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008c8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow =  0x0000;
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x0A<<5;										/******************/
 80008ce:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008d2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80008e4:	463b      	mov	r3, r7
 80008e6:	4619      	mov	r1, r3
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <MX_CAN1_Init+0xa0>)
 80008ea:	f001 f8ab 	bl	8001a44 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000d0 	.word	0x200000d0
 80008fc:	40006400 	.word	0x40006400

08000900 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_TIM1_Init+0x9c>)
 800091e:	4a20      	ldr	r2, [pc, #128]	; (80009a0 <MX_TIM1_Init+0xa0>)
 8000920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2999;
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_TIM1_Init+0x9c>)
 8000924:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000928:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_TIM1_Init+0x9c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 13999;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_TIM1_Init+0x9c>)
 8000932:	f243 62af 	movw	r2, #13999	; 0x36af
 8000936:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_TIM1_Init+0x9c>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_TIM1_Init+0x9c>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_TIM1_Init+0x9c>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800094a:	4814      	ldr	r0, [pc, #80]	; (800099c <MX_TIM1_Init+0x9c>)
 800094c:	f003 f80e 	bl	800396c <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000956:	f000 f8bd 	bl	8000ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM1_Init+0x9c>)
 8000968:	f003 f9c8 	bl	8003cfc <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000972:	f000 f8af 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	2300      	movs	r3, #0
 8000978:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM1_Init+0x9c>)
 8000984:	f003 fbe4 	bl	8004150 <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800098e:	f000 f8a1 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000f8 	.word	0x200000f8
 80009a0:	40010000 	.word	0x40010000

080009a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_DMA_Init+0x3c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a0b      	ldr	r2, [pc, #44]	; (80009e0 <MX_DMA_Init+0x3c>)
 80009b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_DMA_Init+0x3c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2101      	movs	r1, #1
 80009ca:	2038      	movs	r0, #56	; 0x38
 80009cc:	f001 fe7b 	bl	80026c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009d0:	2038      	movs	r0, #56	; 0x38
 80009d2:	f001 fe94 	bl	80026fe <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a31      	ldr	r2, [pc, #196]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2a      	ldr	r2, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0xe4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a70:	4816      	ldr	r0, [pc, #88]	; (8000acc <MX_GPIO_Init+0xe8>)
 8000a72:	f002 fae5 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_GPIO_Init+0xec>)
 8000a8c:	f002 f93c 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a90:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_GPIO_Init+0xe8>)
 8000aaa:	f002 f92d 	bl	8002d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2006      	movs	r0, #6
 8000ab4:	f001 fe07 	bl	80026c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ab8:	2006      	movs	r0, #6
 8000aba:	f001 fe20 	bl	80026fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a33      	ldr	r2, [pc, #204]	; (8000c1c <HAL_ADC_MspInit+0xec>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d15f      	bne.n	8000c12 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <HAL_ADC_MspInit+0xf0>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a31      	ldr	r2, [pc, #196]	; (8000c20 <HAL_ADC_MspInit+0xf0>)
 8000b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <HAL_ADC_MspInit+0xf0>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <HAL_ADC_MspInit+0xf0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2a      	ldr	r2, [pc, #168]	; (8000c20 <HAL_ADC_MspInit+0xf0>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_ADC_MspInit+0xf0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4821      	ldr	r0, [pc, #132]	; (8000c24 <HAL_ADC_MspInit+0xf4>)
 8000b9e:	f002 f8b3 	bl	8002d08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <HAL_ADC_MspInit+0xfc>)
 8000ba6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000be8:	f001 fda4 	bl	8002734 <HAL_DMA_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000bf2:	f7ff ff6f 	bl	8000ad4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bfa:	639a      	str	r2, [r3, #56]	; 0x38
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_ADC_MspInit+0xf8>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2012      	movs	r0, #18
 8000c08:	f001 fd5d 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c0c:	2012      	movs	r0, #18
 8000c0e:	f001 fd76 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012000 	.word	0x40012000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	20000070 	.word	0x20000070
 8000c2c:	40026410 	.word	0x40026410

08000c30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <HAL_CAN_MspInit+0xa4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d13c      	bne.n	8000ccc <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <HAL_CAN_MspInit+0xa8>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <HAL_CAN_MspInit+0xa8>)
 8000c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <HAL_CAN_MspInit+0xa8>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_CAN_MspInit+0xa8>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_CAN_MspInit+0xa8>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_CAN_MspInit+0xa8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <HAL_CAN_MspInit+0xac>)
 8000ca8:	f002 f82e 	bl	8002d08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2014      	movs	r0, #20
 8000cb2:	f001 fd08 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cb6:	2014      	movs	r0, #20
 8000cb8:	f001 fd21 	bl	80026fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2015      	movs	r0, #21
 8000cc2:	f001 fd00 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000cc6:	2015      	movs	r0, #21
 8000cc8:	f001 fd19 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40006400 	.word	0x40006400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d115      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_Base_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <HAL_TIM_Base_MspInit+0x4c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_TIM_Base_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2019      	movs	r0, #25
 8000d14:	f001 fcd7 	bl	80026c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000d18:	2019      	movs	r0, #25
 8000d1a:	f001 fcf0 	bl	80026fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40010000 	.word	0x40010000
 8000d2c:	40023800 	.word	0x40023800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f8ca 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f002 f973 	bl	8003074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <ADC_IRQHandler+0x10>)
 8000d9a:	f000 f9fd 	bl	8001198 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000028 	.word	0x20000028

08000da8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <CAN1_RX0_IRQHandler+0x10>)
 8000dae:	f001 f980 	bl	80020b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200000d0 	.word	0x200000d0

08000dbc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <CAN1_RX1_IRQHandler+0x10>)
 8000dc2:	f001 f976 	bl	80020b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000d0 	.word	0x200000d0

08000dd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000dd6:	f002 fe89 	bl	8003aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000f8 	.word	0x200000f8

08000de4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <DMA2_Stream0_IRQHandler+0x10>)
 8000dea:	f001 fd51 	bl	8002890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000070 	.word	0x20000070

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f003 fa19 	bl	8004280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fc11 	bl	8000674 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e60:	08004308 	.word	0x08004308
  ldr r2, =_sbss
 8000e64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e68:	20000194 	.word	0x20000194

08000e6c <CAN1_SCE_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <CAN1_SCE_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f001 fc09 	bl	80026b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe1c 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fc21 	bl	800271a <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f001 fbe9 	bl	80026c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000190 	.word	0x20000190

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000190 	.word	0x20000190

08000f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e033      	b.n	8000fd2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d109      	bne.n	8000f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff fddc 	bl	8000b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 0310 	and.w	r3, r3, #16
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d118      	bne.n	8000fc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f9a:	f023 0302 	bic.w	r3, r3, #2
 8000f9e:	f043 0202 	orr.w	r2, r3, #2
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 fb4a 	bl	8001640 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f023 0303 	bic.w	r3, r3, #3
 8000fba:	f043 0201 	orr.w	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc2:	e001      	b.n	8000fc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_ADC_Start_IT+0x1a>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	e0bd      	b.n	8001172 <HAL_ADC_Start_IT+0x196>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b01      	cmp	r3, #1
 800100a:	d018      	beq.n	800103e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0201 	orr.w	r2, r2, #1
 800101a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <HAL_ADC_Start_IT+0x1a4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a58      	ldr	r2, [pc, #352]	; (8001184 <HAL_ADC_Start_IT+0x1a8>)
 8001022:	fba2 2303 	umull	r2, r3, r2, r3
 8001026:	0c9a      	lsrs	r2, r3, #18
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001030:	e002      	b.n	8001038 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3b01      	subs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f9      	bne.n	8001032 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	f040 8085 	bne.w	8001158 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001056:	f023 0301 	bic.w	r3, r3, #1
 800105a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106c:	2b00      	cmp	r3, #0
 800106e:	d007      	beq.n	8001080 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001078:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800108c:	d106      	bne.n	800109c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f023 0206 	bic.w	r2, r3, #6
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
 800109a:	e002      	b.n	80010a2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010aa:	4b37      	ldr	r3, [pc, #220]	; (8001188 <HAL_ADC_Start_IT+0x1ac>)
 80010ac:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010b6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010c6:	f043 0320 	orr.w	r3, r3, #32
 80010ca:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d12a      	bne.n	800112e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a2b      	ldr	r2, [pc, #172]	; (800118c <HAL_ADC_Start_IT+0x1b0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d015      	beq.n	800110e <HAL_ADC_Start_IT+0x132>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <HAL_ADC_Start_IT+0x1b4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d105      	bne.n	80010f8 <HAL_ADC_Start_IT+0x11c>
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_ADC_Start_IT+0x1ac>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00a      	beq.n	800110e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_ADC_Start_IT+0x1b8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d136      	bne.n	8001170 <HAL_ADC_Start_IT+0x194>
 8001102:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_ADC_Start_IT+0x1ac>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d130      	bne.n	8001170 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d129      	bne.n	8001170 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	e020      	b.n	8001170 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_ADC_Start_IT+0x1b0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d11b      	bne.n	8001170 <HAL_ADC_Start_IT+0x194>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d114      	bne.n	8001170 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689a      	ldr	r2, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	e00b      	b.n	8001170 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f043 0210 	orr.w	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000000 	.word	0x20000000
 8001184:	431bde83 	.word	0x431bde83
 8001188:	40012300 	.word	0x40012300
 800118c:	40012000 	.word	0x40012000
 8001190:	40012100 	.word	0x40012100
 8001194:	40012200 	.word	0x40012200

08001198 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f003 0320 	and.w	r3, r3, #32
 80011c6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d049      	beq.n	8001262 <HAL_ADC_IRQHandler+0xca>
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d046      	beq.n	8001262 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d105      	bne.n	80011ec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d12b      	bne.n	8001252 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d127      	bne.n	8001252 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800121a:	2b00      	cmp	r3, #0
 800121c:	d119      	bne.n	8001252 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0220 	bic.w	r2, r2, #32
 800122c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff f9c8 	bl	80005e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f06f 0212 	mvn.w	r2, #18
 8001260:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001270:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d057      	beq.n	8001328 <HAL_ADC_IRQHandler+0x190>
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d054      	beq.n	8001328 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d139      	bne.n	8001318 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d12b      	bne.n	8001318 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d124      	bne.n	8001318 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d11d      	bne.n	8001318 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d119      	bne.n	8001318 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d105      	bne.n	8001318 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fa8d 	bl	8001838 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f06f 020c 	mvn.w	r2, #12
 8001326:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001336:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d017      	beq.n	800136e <HAL_ADC_IRQHandler+0x1d6>
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d014      	beq.n	800136e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b01      	cmp	r3, #1
 8001350:	d10d      	bne.n	800136e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f837 	bl	80013d2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f06f 0201 	mvn.w	r2, #1
 800136c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 0320 	and.w	r3, r3, #32
 8001374:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800137c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x218>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0220 	mvn.w	r2, #32
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f820 	bl	80013e6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0220 	mvn.w	r2, #32
 80013ae:	601a      	str	r2, [r3, #0]
  }
}
 80013b0:	bf00      	nop
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_ADC_ConfigChannel+0x1c>
 8001414:	2302      	movs	r3, #2
 8001416:	e105      	b.n	8001624 <HAL_ADC_ConfigChannel+0x228>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d925      	bls.n	8001474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	68d9      	ldr	r1, [r3, #12]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	3b1e      	subs	r3, #30
 800143e:	2207      	movs	r2, #7
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68d9      	ldr	r1, [r3, #12]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29b      	uxth	r3, r3
 800145e:	4618      	mov	r0, r3
 8001460:	4603      	mov	r3, r0
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4403      	add	r3, r0
 8001466:	3b1e      	subs	r3, #30
 8001468:	409a      	lsls	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	e022      	b.n	80014ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6919      	ldr	r1, [r3, #16]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	2207      	movs	r2, #7
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43da      	mvns	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	400a      	ands	r2, r1
 8001496:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6919      	ldr	r1, [r3, #16]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4403      	add	r3, r0
 80014b0:	409a      	lsls	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d824      	bhi.n	800150c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	3b05      	subs	r3, #5
 80014d4:	221f      	movs	r2, #31
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	400a      	ands	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	3b05      	subs	r3, #5
 80014fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
 800150a:	e04c      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b0c      	cmp	r3, #12
 8001512:	d824      	bhi.n	800155e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b23      	subs	r3, #35	; 0x23
 8001526:	221f      	movs	r2, #31
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43da      	mvns	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	400a      	ands	r2, r1
 8001534:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	3b23      	subs	r3, #35	; 0x23
 8001550:	fa00 f203 	lsl.w	r2, r0, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	631a      	str	r2, [r3, #48]	; 0x30
 800155c:	e023      	b.n	80015a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	3b41      	subs	r3, #65	; 0x41
 8001570:	221f      	movs	r2, #31
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	400a      	ands	r2, r1
 800157e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3b41      	subs	r3, #65	; 0x41
 800159a:	fa00 f203 	lsl.w	r2, r0, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_ADC_ConfigChannel+0x234>)
 80015a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a21      	ldr	r2, [pc, #132]	; (8001634 <HAL_ADC_ConfigChannel+0x238>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d109      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1cc>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b12      	cmp	r3, #18
 80015ba:	d105      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_ADC_ConfigChannel+0x238>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d123      	bne.n	800161a <HAL_ADC_ConfigChannel+0x21e>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b10      	cmp	r3, #16
 80015d8:	d003      	beq.n	80015e2 <HAL_ADC_ConfigChannel+0x1e6>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b11      	cmp	r3, #17
 80015e0:	d11b      	bne.n	800161a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d111      	bne.n	800161a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <HAL_ADC_ConfigChannel+0x23c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_ADC_ConfigChannel+0x240>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	0c9a      	lsrs	r2, r3, #18
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800160c:	e002      	b.n	8001614 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3b01      	subs	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f9      	bne.n	800160e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40012300 	.word	0x40012300
 8001634:	40012000 	.word	0x40012000
 8001638:	20000000 	.word	0x20000000
 800163c:	431bde83 	.word	0x431bde83

08001640 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001648:	4b79      	ldr	r3, [pc, #484]	; (8001830 <ADC_Init+0x1f0>)
 800164a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	431a      	orrs	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	021a      	lsls	r2, r3, #8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6899      	ldr	r1, [r3, #8]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	4a58      	ldr	r2, [pc, #352]	; (8001834 <ADC_Init+0x1f4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d022      	beq.n	800171e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6899      	ldr	r1, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	e00f      	b.n	800173e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800172c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800173c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0202 	bic.w	r2, r2, #2
 800174c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6899      	ldr	r1, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
 8001758:	005a      	lsls	r2, r3, #1
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01b      	beq.n	80017a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800177a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800178a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6859      	ldr	r1, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	3b01      	subs	r3, #1
 8001798:	035a      	lsls	r2, r3, #13
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	e007      	b.n	80017b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	051a      	lsls	r2, r3, #20
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6899      	ldr	r1, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f6:	025a      	lsls	r2, r3, #9
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800180e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6899      	ldr	r1, [r3, #8]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	029a      	lsls	r2, r3, #10
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40012300 	.word	0x40012300
 8001834:	0f000001 	.word	0x0f000001

08001838 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0ed      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff f9e0 	bl	8000c30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0201 	orr.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7ff fb5c 	bl	8000f3c <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001886:	e012      	b.n	80018ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001888:	f7ff fb58 	bl	8000f3c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b0a      	cmp	r3, #10
 8001894:	d90b      	bls.n	80018ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2205      	movs	r2, #5
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0c5      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0e5      	beq.n	8001888 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0202 	bic.w	r2, r2, #2
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018cc:	f7ff fb36 	bl	8000f3c <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018d2:	e012      	b.n	80018fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018d4:	f7ff fb32 	bl	8000f3c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d90b      	bls.n	80018fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2205      	movs	r2, #5
 80018f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e09f      	b.n	8001a3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e5      	bne.n	80018d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7e1b      	ldrb	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e007      	b.n	8001932 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7e5b      	ldrb	r3, [r3, #25]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d108      	bne.n	800194c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e007      	b.n	800195c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7e9b      	ldrb	r3, [r3, #26]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0220 	orr.w	r2, r2, #32
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e007      	b.n	8001986 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0220 	bic.w	r2, r2, #32
 8001984:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	7edb      	ldrb	r3, [r3, #27]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0210 	bic.w	r2, r2, #16
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e007      	b.n	80019b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0210 	orr.w	r2, r2, #16
 80019ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7f1b      	ldrb	r3, [r3, #28]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d108      	bne.n	80019ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0208 	orr.w	r2, r2, #8
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	e007      	b.n	80019da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0208 	bic.w	r2, r2, #8
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	7f5b      	ldrb	r3, [r3, #29]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f042 0204 	orr.w	r2, r2, #4
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e007      	b.n	8001a04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0204 	bic.w	r2, r2, #4
 8001a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	ea42 0103 	orr.w	r1, r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	1e5a      	subs	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a5c:	7cfb      	ldrb	r3, [r7, #19]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d003      	beq.n	8001a6a <HAL_CAN_ConfigFilter+0x26>
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	f040 80be 	bne.w	8001be6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a6a:	4b65      	ldr	r3, [pc, #404]	; (8001c00 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a74:	f043 0201 	orr.w	r2, r3, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	2201      	movs	r2, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	401a      	ands	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d123      	bne.n	8001b14 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	3248      	adds	r2, #72	; 0x48
 8001af4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b08:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b0a:	6979      	ldr	r1, [r7, #20]
 8001b0c:	3348      	adds	r3, #72	; 0x48
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d122      	bne.n	8001b62 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b3c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	3248      	adds	r2, #72	; 0x48
 8001b42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b56:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b58:	6979      	ldr	r1, [r7, #20]
 8001b5a:	3348      	adds	r3, #72	; 0x48
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	401a      	ands	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b7c:	e007      	b.n	8001b8e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d109      	bne.n	8001baa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ba8:	e007      	b.n	8001bba <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bd8:	f023 0201 	bic.w	r2, r3, #1
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e006      	b.n	8001bf4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
  }
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40006400 	.word	0x40006400

08001c04 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d12e      	bne.n	8001c76 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f984 	bl	8000f3c <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c36:	e012      	b.n	8001c5e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c38:	f7ff f980 	bl	8000f3c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b0a      	cmp	r3, #10
 8001c44:	d90b      	bls.n	8001c5e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2205      	movs	r2, #5
 8001c56:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e012      	b.n	8001c84 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e5      	bne.n	8001c38 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e006      	b.n	8001c84 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001caa:	7ffb      	ldrb	r3, [r7, #31]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d003      	beq.n	8001cb8 <HAL_CAN_AddTxMessage+0x2c>
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	f040 80b8 	bne.w	8001e28 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 80a0 	beq.w	8001e18 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	0e1b      	lsrs	r3, r3, #24
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d907      	bls.n	8001cf8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e09e      	b.n	8001e36 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d14:	68f9      	ldr	r1, [r7, #12]
 8001d16:	6809      	ldr	r1, [r1, #0]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	440b      	add	r3, r1
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e00f      	b.n	8001d46 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d30:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d3a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3318      	adds	r3, #24
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	440b      	add	r3, r1
 8001d44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3318      	adds	r3, #24
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	440b      	add	r3, r1
 8001d56:	3304      	adds	r3, #4
 8001d58:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	7d1b      	ldrb	r3, [r3, #20]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d111      	bne.n	8001d86 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3304      	adds	r3, #4
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	6811      	ldr	r1, [r2, #0]
 8001d76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	440b      	add	r3, r1
 8001d82:	3304      	adds	r3, #4
 8001d84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3307      	adds	r3, #7
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	061a      	lsls	r2, r3, #24
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3306      	adds	r3, #6
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3305      	adds	r3, #5
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4313      	orrs	r3, r2
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	3204      	adds	r2, #4
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	4610      	mov	r0, r2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	6811      	ldr	r1, [r2, #0]
 8001dae:	ea43 0200 	orr.w	r2, r3, r0
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	011b      	lsls	r3, r3, #4
 8001db6:	440b      	add	r3, r1
 8001db8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001dbc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3303      	adds	r3, #3
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	061a      	lsls	r2, r3, #24
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	7812      	ldrb	r2, [r2, #0]
 8001dde:	4610      	mov	r0, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	ea43 0200 	orr.w	r2, r3, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	440b      	add	r3, r1
 8001dee:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001df2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3318      	adds	r3, #24
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4413      	add	r3, r2
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	6811      	ldr	r1, [r2, #0]
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	440b      	add	r3, r1
 8001e12:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e00e      	b.n	8001e36 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e006      	b.n	8001e36 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	; 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e42:	b480      	push	{r7}
 8001e44:	b087      	sub	sp, #28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e56:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d003      	beq.n	8001e66 <HAL_CAN_GetRxMessage+0x24>
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	f040 80f3 	bne.w	800204c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10e      	bne.n	8001e8a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d116      	bne.n	8001ea8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0e7      	b.n	800205a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0d8      	b.n	800205a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	331b      	adds	r3, #27
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0204 	and.w	r2, r3, #4
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	331b      	adds	r3, #27
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4413      	add	r3, r2
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0d5b      	lsrs	r3, r3, #21
 8001ed6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e00b      	b.n	8001ef8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	331b      	adds	r3, #27
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	4413      	add	r3, r2
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	08db      	lsrs	r3, r3, #3
 8001ef0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	331b      	adds	r3, #27
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0202 	and.w	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	331b      	adds	r3, #27
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 020f 	and.w	r2, r3, #15
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	331b      	adds	r3, #27
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	3304      	adds	r3, #4
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	331b      	adds	r3, #27
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	4413      	add	r3, r2
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0c1b      	lsrs	r3, r3, #16
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0a1a      	lsrs	r2, r3, #8
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0c1a      	lsrs	r2, r3, #16
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e1a      	lsrs	r2, r3, #24
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0a1a      	lsrs	r2, r3, #8
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3305      	adds	r3, #5
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0c1a      	lsrs	r2, r3, #16
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3306      	adds	r3, #6
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	4413      	add	r3, r2
 8002010:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e1a      	lsrs	r2, r3, #24
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	3307      	adds	r3, #7
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d108      	bne.n	8002038 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0220 	orr.w	r2, r2, #32
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	e007      	b.n	8002048 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e006      	b.n	800205a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
  }
}
 800205a:	4618      	mov	r0, r3
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002076:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d002      	beq.n	8002084 <HAL_CAN_ActivateNotification+0x1e>
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d109      	bne.n	8002098 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6959      	ldr	r1, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	e006      	b.n	80020a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
  }
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b08a      	sub	sp, #40	; 0x28
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d07c      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d023      	beq.n	800214a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2201      	movs	r2, #1
 8002108:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f983 	bl	8002420 <HAL_CAN_TxMailbox0CompleteCallback>
 800211a:	e016      	b.n	800214a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
 800212e:	e00c      	b.n	800214a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d004      	beq.n	8002144 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	e002      	b.n	800214a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f989 	bl	800245c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d024      	beq.n	800219e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f963 	bl	8002434 <HAL_CAN_TxMailbox1CompleteCallback>
 800216e:	e016      	b.n	800219e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	e00c      	b.n	800219e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
 8002196:	e002      	b.n	800219e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f969 	bl	8002470 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d024      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f943 	bl	8002448 <HAL_CAN_TxMailbox2CompleteCallback>
 80021c2:	e016      	b.n	80021f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d004      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
 80021d6:	e00c      	b.n	80021f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d004      	beq.n	80021ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ea:	e002      	b.n	80021f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f949 	bl	8002484 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2210      	movs	r2, #16
 8002214:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00b      	beq.n	8002238 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2208      	movs	r2, #8
 8002230:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f930 	bl	8002498 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe f94d 	bl	80004f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00c      	beq.n	800227a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d007      	beq.n	800227a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002270:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2210      	movs	r2, #16
 8002278:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00b      	beq.n	800229c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2208      	movs	r2, #8
 8002294:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 f912 	bl	80024c0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f8f9 	bl	80024ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022ba:	6a3b      	ldr	r3, [r7, #32]
 80022bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00b      	beq.n	80022dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f8fc 	bl	80024d4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2208      	movs	r2, #8
 80022f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 f8f5 	bl	80024e8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d07b      	beq.n	8002400 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d072      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	f043 0304 	orr.w	r3, r3, #4
 8002364:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800236c:	2b00      	cmp	r3, #0
 800236e:	d043      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002376:	2b00      	cmp	r3, #0
 8002378:	d03e      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002380:	2b60      	cmp	r3, #96	; 0x60
 8002382:	d02b      	beq.n	80023dc <HAL_CAN_IRQHandler+0x32a>
 8002384:	2b60      	cmp	r3, #96	; 0x60
 8002386:	d82e      	bhi.n	80023e6 <HAL_CAN_IRQHandler+0x334>
 8002388:	2b50      	cmp	r3, #80	; 0x50
 800238a:	d022      	beq.n	80023d2 <HAL_CAN_IRQHandler+0x320>
 800238c:	2b50      	cmp	r3, #80	; 0x50
 800238e:	d82a      	bhi.n	80023e6 <HAL_CAN_IRQHandler+0x334>
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d019      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x316>
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d826      	bhi.n	80023e6 <HAL_CAN_IRQHandler+0x334>
 8002398:	2b30      	cmp	r3, #48	; 0x30
 800239a:	d010      	beq.n	80023be <HAL_CAN_IRQHandler+0x30c>
 800239c:	2b30      	cmp	r3, #48	; 0x30
 800239e:	d822      	bhi.n	80023e6 <HAL_CAN_IRQHandler+0x334>
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d002      	beq.n	80023aa <HAL_CAN_IRQHandler+0x2f8>
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d005      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023a8:	e01d      	b.n	80023e6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023b2:	e019      	b.n	80023e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023bc:	e014      	b.n	80023e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	f043 0320 	orr.w	r3, r3, #32
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023c6:	e00f      	b.n	80023e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023d0:	e00a      	b.n	80023e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023da:	e005      	b.n	80023e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023e4:	e000      	b.n	80023e8 <HAL_CAN_IRQHandler+0x336>
            break;
 80023e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2204      	movs	r2, #4
 80023fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f872 	bl	80024fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <__NVIC_SetPriorityGrouping>:
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800253c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002542:	4a04      	ldr	r2, [pc, #16]	; (8002554 <__NVIC_SetPriorityGrouping+0x44>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	60d3      	str	r3, [r2, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_GetPriorityGrouping>:
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <__NVIC_GetPriorityGrouping+0x18>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	f003 0307 	and.w	r3, r3, #7
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_EnableIRQ>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0b      	blt.n	800259e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <__NVIC_EnableIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	; (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	; 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	; 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800267c:	d301      	bcc.n	8002682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267e:	2301      	movs	r3, #1
 8002680:	e00f      	b.n	80026a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <SysTick_Config+0x40>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800268a:	210f      	movs	r1, #15
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f7ff ff8e 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <SysTick_Config+0x40>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800269a:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SysTick_Config+0x40>)
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	e000e010 	.word	0xe000e010

080026b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff ff29 	bl	8002510 <__NVIC_SetPriorityGrouping>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d8:	f7ff ff3e 	bl	8002558 <__NVIC_GetPriorityGrouping>
 80026dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	6978      	ldr	r0, [r7, #20]
 80026e4:	f7ff ff8e 	bl	8002604 <NVIC_EncodePriority>
 80026e8:	4602      	mov	r2, r0
 80026ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff5d 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f6:	bf00      	nop
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff31 	bl	8002574 <__NVIC_EnableIRQ>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ffa2 	bl	800266c <SysTick_Config>
 8002728:	4603      	mov	r3, r0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7fe fbfc 	bl	8000f3c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e099      	b.n	8002884 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002770:	e00f      	b.n	8002792 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002772:	f7fe fbe3 	bl	8000f3c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b05      	cmp	r3, #5
 800277e:	d908      	bls.n	8002792 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2203      	movs	r2, #3
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e078      	b.n	8002884 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e8      	bne.n	8002772 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4b38      	ldr	r3, [pc, #224]	; (800288c <HAL_DMA_Init+0x158>)
 80027ac:	4013      	ands	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d107      	bne.n	80027fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4313      	orrs	r3, r2
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0307 	bic.w	r3, r3, #7
 8002812:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b04      	cmp	r3, #4
 8002824:	d117      	bne.n	8002856 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f9e9 	bl	8002c10 <DMA_CheckFifoParam>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2240      	movs	r2, #64	; 0x40
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002852:	2301      	movs	r3, #1
 8002854:	e016      	b.n	8002884 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9a0 	bl	8002ba4 <DMA_CalcBaseAndBitshift>
 8002864:	4603      	mov	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	223f      	movs	r2, #63	; 0x3f
 800286e:	409a      	lsls	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	f010803f 	.word	0xf010803f

08002890 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800289c:	4b8e      	ldr	r3, [pc, #568]	; (8002ad8 <HAL_DMA_IRQHandler+0x248>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a8e      	ldr	r2, [pc, #568]	; (8002adc <HAL_DMA_IRQHandler+0x24c>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2208      	movs	r2, #8
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01a      	beq.n	80028fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	2208      	movs	r2, #8
 80028ea:	409a      	lsls	r2, r3
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2201      	movs	r2, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d012      	beq.n	8002932 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291e:	2201      	movs	r2, #1
 8002920:	409a      	lsls	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f043 0202 	orr.w	r2, r3, #2
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2204      	movs	r2, #4
 8002938:	409a      	lsls	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d012      	beq.n	8002968 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00b      	beq.n	8002968 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	2204      	movs	r2, #4
 8002956:	409a      	lsls	r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	f043 0204 	orr.w	r2, r3, #4
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2210      	movs	r2, #16
 800296e:	409a      	lsls	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d043      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d03c      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298a:	2210      	movs	r2, #16
 800298c:	409a      	lsls	r2, r3
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d018      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d108      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d024      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
 80029be:	e01f      	b.n	8002a00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01b      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	4798      	blx	r3
 80029d0:	e016      	b.n	8002a00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0208 	bic.w	r2, r2, #8
 80029ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2220      	movs	r2, #32
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 808f 	beq.w	8002b30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8087 	beq.w	8002b30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2220      	movs	r2, #32
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	d136      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0216 	bic.w	r2, r2, #22
 8002a48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d103      	bne.n	8002a6a <HAL_DMA_IRQHandler+0x1da>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d007      	beq.n	8002a7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0208 	bic.w	r2, r2, #8
 8002a78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	223f      	movs	r2, #63	; 0x3f
 8002a80:	409a      	lsls	r2, r3
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d07e      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	4798      	blx	r3
        }
        return;
 8002aa6:	e079      	b.n	8002b9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01d      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d031      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
 8002ad4:	e02c      	b.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
 8002ad6:	bf00      	nop
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
 8002af0:	e01e      	b.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10f      	bne.n	8002b20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f022 0210 	bic.w	r2, r2, #16
 8002b0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d032      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d022      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2205      	movs	r2, #5
 8002b48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0201 	bic.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d307      	bcc.n	8002b78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f2      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x2cc>
 8002b76:	e000      	b.n	8002b7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
 8002b9a:	e000      	b.n	8002b9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b9c:	bf00      	nop
    }
  }
}
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3b10      	subs	r3, #16
 8002bb4:	4a14      	ldr	r2, [pc, #80]	; (8002c08 <DMA_CalcBaseAndBitshift+0x64>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <DMA_CalcBaseAndBitshift+0x68>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d909      	bls.n	8002be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	1d1a      	adds	r2, r3, #4
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	659a      	str	r2, [r3, #88]	; 0x58
 8002be4:	e007      	b.n	8002bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	aaaaaaab 	.word	0xaaaaaaab
 8002c0c:	080042f0 	.word	0x080042f0

08002c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d11f      	bne.n	8002c6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d856      	bhi.n	8002cde <DMA_CheckFifoParam+0xce>
 8002c30:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <DMA_CheckFifoParam+0x28>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c49 	.word	0x08002c49
 8002c3c:	08002c5b 	.word	0x08002c5b
 8002c40:	08002c49 	.word	0x08002c49
 8002c44:	08002cdf 	.word	0x08002cdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d046      	beq.n	8002ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c58:	e043      	b.n	8002ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c62:	d140      	bne.n	8002ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c68:	e03d      	b.n	8002ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c72:	d121      	bne.n	8002cb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d837      	bhi.n	8002cea <DMA_CheckFifoParam+0xda>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <DMA_CheckFifoParam+0x70>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002c97 	.word	0x08002c97
 8002c88:	08002c91 	.word	0x08002c91
 8002c8c:	08002ca9 	.word	0x08002ca9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
      break;
 8002c94:	e030      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d025      	beq.n	8002cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca6:	e022      	b.n	8002cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cb0:	d11f      	bne.n	8002cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cb6:	e01c      	b.n	8002cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d903      	bls.n	8002cc6 <DMA_CheckFifoParam+0xb6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cc4:	e018      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cca:	e015      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      break;
 8002cdc:	e00b      	b.n	8002cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e00a      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e008      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e006      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e004      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	e16b      	b.n	8002ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d24:	2201      	movs	r2, #1
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	f040 815a 	bne.w	8002ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d005      	beq.n	8002d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d130      	bne.n	8002dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0201 	and.w	r2, r3, #1
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b03      	cmp	r3, #3
 8002dc6:	d017      	beq.n	8002df8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d123      	bne.n	8002e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	08da      	lsrs	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3208      	adds	r2, #8
 8002e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	08da      	lsrs	r2, r3, #3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0203 	and.w	r2, r3, #3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 80b4 	beq.w	8002ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b60      	ldr	r3, [pc, #384]	; (8003014 <HAL_GPIO_Init+0x30c>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	4a5f      	ldr	r2, [pc, #380]	; (8003014 <HAL_GPIO_Init+0x30c>)
 8002e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9e:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <HAL_GPIO_Init+0x30c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eaa:	4a5b      	ldr	r2, [pc, #364]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	220f      	movs	r2, #15
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_GPIO_Init+0x314>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d02b      	beq.n	8002f2e <HAL_GPIO_Init+0x226>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a51      	ldr	r2, [pc, #324]	; (8003020 <HAL_GPIO_Init+0x318>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d025      	beq.n	8002f2a <HAL_GPIO_Init+0x222>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a50      	ldr	r2, [pc, #320]	; (8003024 <HAL_GPIO_Init+0x31c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d01f      	beq.n	8002f26 <HAL_GPIO_Init+0x21e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a4f      	ldr	r2, [pc, #316]	; (8003028 <HAL_GPIO_Init+0x320>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d019      	beq.n	8002f22 <HAL_GPIO_Init+0x21a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a4e      	ldr	r2, [pc, #312]	; (800302c <HAL_GPIO_Init+0x324>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_GPIO_Init+0x216>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a4d      	ldr	r2, [pc, #308]	; (8003030 <HAL_GPIO_Init+0x328>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00d      	beq.n	8002f1a <HAL_GPIO_Init+0x212>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4c      	ldr	r2, [pc, #304]	; (8003034 <HAL_GPIO_Init+0x32c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <HAL_GPIO_Init+0x20e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4b      	ldr	r2, [pc, #300]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_GPIO_Init+0x20a>
 8002f0e:	2307      	movs	r3, #7
 8002f10:	e00e      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f12:	2308      	movs	r3, #8
 8002f14:	e00c      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f16:	2306      	movs	r3, #6
 8002f18:	e00a      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f1a:	2305      	movs	r3, #5
 8002f1c:	e008      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f1e:	2304      	movs	r3, #4
 8002f20:	e006      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f22:	2303      	movs	r3, #3
 8002f24:	e004      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <HAL_GPIO_Init+0x228>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f002 0203 	and.w	r2, r2, #3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4093      	lsls	r3, r2
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f40:	4935      	ldr	r1, [pc, #212]	; (8003018 <HAL_GPIO_Init+0x310>)
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f72:	4a32      	ldr	r2, [pc, #200]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f9c:	4a27      	ldr	r2, [pc, #156]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_GPIO_Init+0x334>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	43db      	mvns	r3, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_GPIO_Init+0x334>)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_GPIO_Init+0x334>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d003      	beq.n	8002ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ff0:	4a12      	ldr	r2, [pc, #72]	; (800303c <HAL_GPIO_Init+0x334>)
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b0f      	cmp	r3, #15
 8003000:	f67f ae90 	bls.w	8002d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3724      	adds	r7, #36	; 0x24
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800
 8003018:	40013800 	.word	0x40013800
 800301c:	40020000 	.word	0x40020000
 8003020:	40020400 	.word	0x40020400
 8003024:	40020800 	.word	0x40020800
 8003028:	40020c00 	.word	0x40020c00
 800302c:	40021000 	.word	0x40021000
 8003030:	40021400 	.word	0x40021400
 8003034:	40021800 	.word	0x40021800
 8003038:	40021c00 	.word	0x40021c00
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800305c:	e003      	b.n	8003066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800307e:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d006      	beq.n	8003098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800308a:	4a05      	ldr	r2, [pc, #20]	; (80030a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa9c 	bl	80005d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40013c00 	.word	0x40013c00

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e267      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b7e      	ldr	r3, [pc, #504]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e242      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b69      	ldr	r3, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd feee 	bl	8000f3c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd feea 	bl	8000f3c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e207      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fd feda 	bl	8000f3c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fd fed6 	bl	8000f3c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1f3      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c7      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4937      	ldr	r1, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fd fe8f 	bl	8000f3c <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003222:	f7fd fe8b 	bl	8000f3c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a8      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4925      	ldr	r1, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd fe6e 	bl	8000f3c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003264:	f7fd fe6a 	bl	8000f3c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e187      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fd fe4e 	bl	8000f3c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fd fe4a 	bl	8000f3c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e167      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e01b      	b.n	80032fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fd fe37 	bl	8000f3c <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fd fe33 	bl	8000f3c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e150      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b81      	ldr	r3, [pc, #516]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b77      	ldr	r3, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b74      	ldr	r3, [pc, #464]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fd fdf3 	bl	8000f3c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fd fdef 	bl	8000f3c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e10c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x2ea>
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x30c>
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5b      	ldr	r2, [pc, #364]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fd fdb4 	bl	8000f3c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fd fdb0 	bl	8000f3c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0cb      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x334>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fd9e 	bl	8000f3c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fd fd9a 	bl	8000f3c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0b5      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4a38      	ldr	r2, [pc, #224]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a1 	beq.w	8003584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d05c      	beq.n	8003508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d141      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd fd6e 	bl	8000f3c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd fd6a 	bl	8000f3c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e087      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fd fd43 	bl	8000f3c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fd fd3f 	bl	8000f3c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e05c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x416>
 80034d8:	e054      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fd fd2c 	bl	8000f3c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd fd28 	bl	8000f3c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e045      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x444>
 8003506:	e03d      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e038      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4ec>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d028      	beq.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d121      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d11a      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d111      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0cc      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b68      	ldr	r3, [pc, #416]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d90c      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800360a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d044      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d119      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	2b03      	cmp	r3, #3
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e067      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4934      	ldr	r1, [pc, #208]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fd fc5a 	bl	8000f3c <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fd fc56 	bl	8000f3c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e04f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d20c      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fbba 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	080042e0 	.word	0x080042e0
 8003758:	20000000 	.word	0x20000000
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b094      	sub	sp, #80	; 0x50
 8003766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	647b      	str	r3, [r7, #68]	; 0x44
 800376c:	2300      	movs	r3, #0
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003770:	2300      	movs	r3, #0
 8003772:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4b79      	ldr	r3, [pc, #484]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d00d      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003784:	2b08      	cmp	r3, #8
 8003786:	f200 80e1 	bhi.w	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x34>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3a>
 8003792:	e0db      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b73      	ldr	r3, [pc, #460]	; (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 8003796:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003798:	e0db      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379a:	4b73      	ldr	r3, [pc, #460]	; (8003968 <HAL_RCC_GetSysClockFreq+0x208>)
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800379e:	e0d8      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4b6f      	ldr	r3, [pc, #444]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037aa:	4b6d      	ldr	r3, [pc, #436]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d063      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b6a      	ldr	r3, [pc, #424]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c8:	633b      	str	r3, [r7, #48]	; 0x30
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
 80037ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4621      	mov	r1, r4
 80037ec:	1a51      	subs	r1, r2, r1
 80037ee:	6139      	str	r1, [r7, #16]
 80037f0:	4629      	mov	r1, r5
 80037f2:	eb63 0301 	sbc.w	r3, r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	018b      	lsls	r3, r1, #6
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800380e:	4651      	mov	r1, sl
 8003810:	018a      	lsls	r2, r1, #6
 8003812:	4651      	mov	r1, sl
 8003814:	ebb2 0801 	subs.w	r8, r2, r1
 8003818:	4659      	mov	r1, fp
 800381a:	eb63 0901 	sbc.w	r9, r3, r1
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800382a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800382e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003832:	4690      	mov	r8, r2
 8003834:	4699      	mov	r9, r3
 8003836:	4623      	mov	r3, r4
 8003838:	eb18 0303 	adds.w	r3, r8, r3
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	462b      	mov	r3, r5
 8003840:	eb49 0303 	adc.w	r3, r9, r3
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003852:	4629      	mov	r1, r5
 8003854:	024b      	lsls	r3, r1, #9
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800385c:	4621      	mov	r1, r4
 800385e:	024a      	lsls	r2, r1, #9
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003866:	2200      	movs	r2, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
 800386a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800386c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003870:	f7fc fcaa 	bl	80001c8 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800387c:	e058      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b38      	ldr	r3, [pc, #224]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	2200      	movs	r2, #0
 8003886:	4618      	mov	r0, r3
 8003888:	4611      	mov	r1, r2
 800388a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003898:	4642      	mov	r2, r8
 800389a:	464b      	mov	r3, r9
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	0159      	lsls	r1, r3, #5
 80038a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038aa:	0150      	lsls	r0, r2, #5
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4641      	mov	r1, r8
 80038b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038b6:	4649      	mov	r1, r9
 80038b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038d0:	ebb2 040a 	subs.w	r4, r2, sl
 80038d4:	eb63 050b 	sbc.w	r5, r3, fp
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	00eb      	lsls	r3, r5, #3
 80038e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038e6:	00e2      	lsls	r2, r4, #3
 80038e8:	4614      	mov	r4, r2
 80038ea:	461d      	mov	r5, r3
 80038ec:	4643      	mov	r3, r8
 80038ee:	18e3      	adds	r3, r4, r3
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	464b      	mov	r3, r9
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003906:	4629      	mov	r1, r5
 8003908:	028b      	lsls	r3, r1, #10
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003910:	4621      	mov	r1, r4
 8003912:	028a      	lsls	r2, r1, #10
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	61fa      	str	r2, [r7, #28]
 8003920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003924:	f7fc fc50 	bl	80001c8 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800394a:	e002      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 800394e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003954:	4618      	mov	r0, r3
 8003956:	3750      	adds	r7, #80	; 0x50
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	00f42400 	.word	0x00f42400
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e041      	b.n	8003a02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fd f9a4 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f000 fa96 	bl	8003edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d001      	beq.n	8003a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e04e      	b.n	8003ac2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d022      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x80>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4e:	d01d      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d018      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x80>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ad8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d013      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x80>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_TIM_Base_Start_IT+0xd0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00e      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x80>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d009      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x80>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d004      	beq.n	8003a8c <HAL_TIM_Base_Start_IT+0x80>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d111      	bne.n	8003ab0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d010      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	e007      	b.n	8003ac0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40010000 	.word	0x40010000
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00
 8003ae0:	40010400 	.word	0x40010400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40001800 	.word	0x40001800

08003aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d122      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d11b      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f06f 0202 	mvn.w	r2, #2
 8003b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f9b5 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003b34:	e005      	b.n	8003b42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f9a7 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f9b8 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0304 	and.w	r3, r3, #4
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d122      	bne.n	8003b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d11b      	bne.n	8003b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0204 	mvn.w	r2, #4
 8003b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f98b 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003b88:	e005      	b.n	8003b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f97d 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f98e 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d122      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d11b      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f06f 0208 	mvn.w	r2, #8
 8003bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69db      	ldr	r3, [r3, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f961 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e005      	b.n	8003bea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f953 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f964 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d122      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0210 	mvn.w	r2, #16
 8003c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f937 	bl	8003e9e <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f929 	bl	8003e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f93a 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d10e      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d107      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0201 	mvn.w	r2, #1
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fc fcd2 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c7a:	2b80      	cmp	r3, #128	; 0x80
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c88:	2b80      	cmp	r3, #128	; 0x80
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fae0 	bl	800425c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8ff 	bl	8003ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d107      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0220 	mvn.w	r2, #32
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 faaa 	bl	8004248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_TIM_ConfigClockSource+0x1c>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e0b4      	b.n	8003e82 <HAL_TIM_ConfigClockSource+0x186>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d03e      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d56:	f200 8087 	bhi.w	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	f000 8086 	beq.w	8003e6e <HAL_TIM_ConfigClockSource+0x172>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d87f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d01a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d87b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b60      	cmp	r3, #96	; 0x60
 8003d72:	d050      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0x11a>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d877      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d78:	2b50      	cmp	r3, #80	; 0x50
 8003d7a:	d03c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xfa>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d873      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d058      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x13a>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d86f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d064      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d86b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d060      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d867      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d05a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	e062      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f000 f9ad 	bl	8004110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]
      break;
 8003dce:	e04f      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 f996 	bl	8004110 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df2:	609a      	str	r2, [r3, #8]
      break;
 8003df4:	e03c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6859      	ldr	r1, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f000 f90a 	bl	800401c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2150      	movs	r1, #80	; 0x50
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 f963 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e14:	e02c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 f929 	bl	800407a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2160      	movs	r1, #96	; 0x60
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f953 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e34:	e01c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 f8ea 	bl	800401c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2140      	movs	r1, #64	; 0x40
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f943 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e54:	e00c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 f93a 	bl	80040da <TIM_ITRx_SetConfig>
      break;
 8003e66:	e003      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e000      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea6:	bf00      	nop
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a40      	ldr	r2, [pc, #256]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d00f      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3d      	ldr	r2, [pc, #244]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a3c      	ldr	r2, [pc, #240]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3a      	ldr	r2, [pc, #232]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d108      	bne.n	8003f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d02b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d027      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <TIM_Base_SetConfig+0x118>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d023      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <TIM_Base_SetConfig+0x11c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	; (8003ffc <TIM_Base_SetConfig+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a28      	ldr	r2, [pc, #160]	; (8004004 <TIM_Base_SetConfig+0x128>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a27      	ldr	r2, [pc, #156]	; (8004008 <TIM_Base_SetConfig+0x12c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a26      	ldr	r2, [pc, #152]	; (800400c <TIM_Base_SetConfig+0x130>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a25      	ldr	r2, [pc, #148]	; (8004010 <TIM_Base_SetConfig+0x134>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a24      	ldr	r2, [pc, #144]	; (8004014 <TIM_Base_SetConfig+0x138>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a23      	ldr	r2, [pc, #140]	; (8004018 <TIM_Base_SetConfig+0x13c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xf8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0c      	ldr	r2, [pc, #48]	; (8004000 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800
 8004010:	40001800 	.word	0x40001800
 8004014:	40001c00 	.word	0x40001c00
 8004018:	40002000 	.word	0x40002000

0800401c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f023 0201 	bic.w	r2, r3, #1
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 030a 	bic.w	r3, r3, #10
 8004058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407a:	b480      	push	{r7}
 800407c:	b087      	sub	sp, #28
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f023 0210 	bic.w	r2, r3, #16
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040da:	b480      	push	{r7}
 80040dc:	b085      	sub	sp, #20
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f043 0307 	orr.w	r3, r3, #7
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	431a      	orrs	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e05a      	b.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d01d      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a17      	ldr	r2, [pc, #92]	; (8004240 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d10c      	bne.n	800420c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4313      	orrs	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40010400 	.word	0x40010400
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800

08004248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <memset>:
 8004270:	4402      	add	r2, r0
 8004272:	4603      	mov	r3, r0
 8004274:	4293      	cmp	r3, r2
 8004276:	d100      	bne.n	800427a <memset+0xa>
 8004278:	4770      	bx	lr
 800427a:	f803 1b01 	strb.w	r1, [r3], #1
 800427e:	e7f9      	b.n	8004274 <memset+0x4>

08004280 <__libc_init_array>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	4d0d      	ldr	r5, [pc, #52]	; (80042b8 <__libc_init_array+0x38>)
 8004284:	4c0d      	ldr	r4, [pc, #52]	; (80042bc <__libc_init_array+0x3c>)
 8004286:	1b64      	subs	r4, r4, r5
 8004288:	10a4      	asrs	r4, r4, #2
 800428a:	2600      	movs	r6, #0
 800428c:	42a6      	cmp	r6, r4
 800428e:	d109      	bne.n	80042a4 <__libc_init_array+0x24>
 8004290:	4d0b      	ldr	r5, [pc, #44]	; (80042c0 <__libc_init_array+0x40>)
 8004292:	4c0c      	ldr	r4, [pc, #48]	; (80042c4 <__libc_init_array+0x44>)
 8004294:	f000 f818 	bl	80042c8 <_init>
 8004298:	1b64      	subs	r4, r4, r5
 800429a:	10a4      	asrs	r4, r4, #2
 800429c:	2600      	movs	r6, #0
 800429e:	42a6      	cmp	r6, r4
 80042a0:	d105      	bne.n	80042ae <__libc_init_array+0x2e>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80042a8:	4798      	blx	r3
 80042aa:	3601      	adds	r6, #1
 80042ac:	e7ee      	b.n	800428c <__libc_init_array+0xc>
 80042ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b2:	4798      	blx	r3
 80042b4:	3601      	adds	r6, #1
 80042b6:	e7f2      	b.n	800429e <__libc_init_array+0x1e>
 80042b8:	08004300 	.word	0x08004300
 80042bc:	08004300 	.word	0x08004300
 80042c0:	08004300 	.word	0x08004300
 80042c4:	08004304 	.word	0x08004304

080042c8 <_init>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr

080042d4 <_fini>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	bf00      	nop
 80042d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042da:	bc08      	pop	{r3}
 80042dc:	469e      	mov	lr, r3
 80042de:	4770      	bx	lr


test_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004650  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f8  080047f8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004800  08004800  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          000001cc  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000aad0  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b7c  00000000  00000000  0002ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000888  00000000  00000000  0002c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000685  00000000  00000000  0002cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000209ca  00000000  00000000  0002d5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ac66  00000000  00000000  0004dfc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5c87  00000000  00000000  00058c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002248  00000000  00000000  0011e8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00120afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080047c0 	.word	0x080047c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	080047c0 	.word	0x080047c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004c8:	f3bf 8f4f 	dsb	sy
}
 80004cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <__NVIC_SystemReset+0x24>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80004d6:	4904      	ldr	r1, [pc, #16]	; (80004e8 <__NVIC_SystemReset+0x24>)
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <__NVIC_SystemReset+0x28>)
 80004da:	4313      	orrs	r3, r2
 80004dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80004de:	f3bf 8f4f 	dsb	sy
}
 80004e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <__NVIC_SystemReset+0x20>
 80004e8:	e000ed00 	.word	0xe000ed00
 80004ec:	05fa0004 	.word	0x05fa0004

080004f0 <subString>:
//uint8_t OFLD[]={0x4FU, 0x46U, 0x4CU, 0x44U};

uint16_t CanRxADC_Val = 0;

uint8_t *subString(uint8_t *s, int pos, int index)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	uint8_t *t =&s[pos];
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	4413      	add	r3, r2
 8000502:	617b      	str	r3, [r7, #20]
	/*s[pos-1] = '\0';
	for (int i = index; i < (strlen((char *)t)+1); i++)
	{
		t[i]='\0';
	}*/
	return t;
 8000504:	697b      	ldr	r3, [r7, #20]
}
 8000506:	4618      	mov	r0, r3
 8000508:	371c      	adds	r7, #28
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <StrCompare>:


bool StrCompare(uint8_t *pBuff, uint8_t *Sample, uint8_t nSize)
{
 8000512:	b480      	push	{r7}
 8000514:	b087      	sub	sp, #28
 8000516:	af00      	add	r7, sp, #0
 8000518:	60f8      	str	r0, [r7, #12]
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	4613      	mov	r3, r2
 800051e:	71fb      	strb	r3, [r7, #7]
	for (int i=0; i< nSize; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00e      	b.n	8000544 <StrCompare+0x32>
	{
		if (pBuff[i] != Sample[i])
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	440b      	add	r3, r1
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d001      	beq.n	800053e <StrCompare+0x2c>
		{
			return false;
 800053a:	2300      	movs	r3, #0
 800053c:	e007      	b.n	800054e <StrCompare+0x3c>
	for (int i=0; i< nSize; i++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbec      	blt.n	8000526 <StrCompare+0x14>
		}
	}
	return true;
 800054c:	2301      	movs	r3, #1
}
 800054e:	4618      	mov	r0, r3
 8000550:	371c      	adds	r7, #28
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <WriteComm>:


bool WriteComm(uint8_t *pBuff, uint8_t nSize)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
	return HAL_UART_Transmit_DMA(&huart2, pBuff, nSize);
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	b29b      	uxth	r3, r3
 800056c:	461a      	mov	r2, r3
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	4806      	ldr	r0, [pc, #24]	; (800058c <WriteComm+0x30>)
 8000572:	f003 f8a9 	bl	80036c8 <HAL_UART_Transmit_DMA>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000007c 	.word	0x2000007c

08000590 <ReadComm>:

bool ReadComm(uint8_t *pBuff, uint8_t nSize)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	if ((pBuff[0] == STX[0]) && (pBuff[9] == ETX[0]))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	4b1a      	ldr	r3, [pc, #104]	; (800060c <ReadComm+0x7c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d127      	bne.n	80005f8 <ReadComm+0x68>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3309      	adds	r3, #9
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	4b18      	ldr	r3, [pc, #96]	; (8000610 <ReadComm+0x80>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d120      	bne.n	80005f8 <ReadComm+0x68>
	{
		memcpy(strCommand, subString(pBuff, 1, 4), 4);
 80005b6:	2204      	movs	r2, #4
 80005b8:	2101      	movs	r1, #1
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff ff98 	bl	80004f0 <subString>
 80005c0:	4603      	mov	r3, r0
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b13      	ldr	r3, [pc, #76]	; (8000614 <ReadComm+0x84>)
 80005c8:	601a      	str	r2, [r3, #0]
		memcpy(strOpt, subString(pBuff, 5, 1), 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2105      	movs	r1, #5
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff ff8e 	bl	80004f0 <subString>
 80005d4:	4603      	mov	r3, r0
 80005d6:	781a      	ldrb	r2, [r3, #0]
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <ReadComm+0x88>)
 80005da:	701a      	strb	r2, [r3, #0]
		memcpy(strData, subString(pBuff, 6, 2), 2);
 80005dc:	2202      	movs	r2, #2
 80005de:	2106      	movs	r1, #6
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff85 	bl	80004f0 <subString>
 80005e6:	4603      	mov	r3, r0
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <ReadComm+0x8c>)
 80005ee:	801a      	strh	r2, [r3, #0]
		
		bDataAvailable = true;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <ReadComm+0x90>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
 80005f6:	e002      	b.n	80005fe <ReadComm+0x6e>
	}
	else{
		bDataAvailable = false;
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <ReadComm+0x90>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}
	return bDataAvailable;
 80005fe:	4b08      	ldr	r3, [pc, #32]	; (8000620 <ReadComm+0x90>)
 8000600:	781b      	ldrb	r3, [r3, #0]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000004 	.word	0x20000004
 8000610:	20000008 	.word	0x20000008
 8000614:	200001e4 	.word	0x200001e4
 8000618:	200001e8 	.word	0x200001e8
 800061c:	200001ec 	.word	0x200001ec
 8000620:	200001ee 	.word	0x200001ee

08000624 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 800062c:	4b4e      	ldr	r3, [pc, #312]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800062e:	4a4f      	ldr	r2, [pc, #316]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000630:	2100      	movs	r1, #0
 8000632:	484f      	ldr	r0, [pc, #316]	; (8000770 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000634:	f001 f8a5 	bl	8001782 <HAL_CAN_GetRxMessage>
	uint8_t nIndex_CAN =0;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]

	if(RxHeader.StdId == 0x0B)
 800063c:	4b4b      	ldr	r3, [pc, #300]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b0b      	cmp	r3, #11
 8000642:	d14a      	bne.n	80006da <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
	{
		CanRxADC_Val = (uint16_t)((RxData[0]<<8) + RxData[1]);
 8000644:	4b48      	ldr	r3, [pc, #288]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	021b      	lsls	r3, r3, #8
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	b29b      	uxth	r3, r3
 8000654:	4413      	add	r3, r2
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 800065a:	801a      	strh	r2, [r3, #0]

		uint8_t ID_valB=0x0B;
 800065c:	230b      	movs	r3, #11
 800065e:	73bb      	strb	r3, [r7, #14]
		memcpy(nTxData_CAN + nIndex_CAN, STX, 1);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4a45      	ldr	r2, [pc, #276]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000664:	4413      	add	r3, r2
 8000666:	4a45      	ldr	r2, [pc, #276]	; (800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3301      	adds	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, VADC, 4);
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	4a40      	ldr	r2, [pc, #256]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000676:	4413      	add	r3, r2
 8000678:	4a41      	ldr	r2, [pc, #260]	; (8000780 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	601a      	str	r2, [r3, #0]
		nIndex_CAN +=4;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3304      	adds	r3, #4
 8000682:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, &ID_valB, 1);
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000688:	4413      	add	r3, r2
 800068a:	7bba      	ldrb	r2, [r7, #14]
 800068c:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	3301      	adds	r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, RxData, 2);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	4a38      	ldr	r2, [pc, #224]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000698:	4413      	add	r3, r2
 800069a:	4a33      	ldr	r2, [pc, #204]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800069c:	8812      	ldrh	r2, [r2, #0]
 800069e:	801a      	strh	r2, [r3, #0]
		nIndex_CAN +=2;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3302      	adds	r3, #2
 80006a4:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, ACK, 1);
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4a33      	ldr	r2, [pc, #204]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80006aa:	4413      	add	r3, r2
 80006ac:	4a35      	ldr	r2, [pc, #212]	; (8000784 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80006ae:	7812      	ldrb	r2, [r2, #0]
 80006b0:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	3301      	adds	r3, #1
 80006b6:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, ETX, 1);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	4a2f      	ldr	r2, [pc, #188]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80006bc:	4413      	add	r3, r2
 80006be:	4a32      	ldr	r2, [pc, #200]	; (8000788 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 80006c0:	7812      	ldrb	r2, [r2, #0]
 80006c2:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73fb      	strb	r3, [r7, #15]
		WriteComm(nTxData_CAN, MAX_LEN);
 80006ca:	4b30      	ldr	r3, [pc, #192]	; (800078c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	4829      	ldr	r0, [pc, #164]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80006d4:	f7ff ff42 	bl	800055c <WriteComm>
		nIndex_CAN +=1;
		memcpy(nTxData_CAN + nIndex_CAN, ETX, 1);
		nIndex_CAN +=1;
		WriteComm(nTxData_CAN, MAX_LEN);
	}
}
 80006d8:	e041      	b.n	800075e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
	else if (RxHeader.StdId == 0x0C)
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2b0c      	cmp	r3, #12
 80006e0:	d13d      	bne.n	800075e <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
		uint8_t ID_valC =0x0C;
 80006e2:	230c      	movs	r3, #12
 80006e4:	737b      	strb	r3, [r7, #13]
		memcpy(nTxData_CAN + nIndex_CAN, STX, 1);
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	4a23      	ldr	r2, [pc, #140]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80006ea:	4413      	add	r3, r2
 80006ec:	4a23      	ldr	r2, [pc, #140]	; (800077c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, RBTN, 4);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80006fc:	4413      	add	r3, r2
 80006fe:	4a24      	ldr	r2, [pc, #144]	; (8000790 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8000700:	6812      	ldr	r2, [r2, #0]
 8000702:	601a      	str	r2, [r3, #0]
		nIndex_CAN +=4;
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3304      	adds	r3, #4
 8000708:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, &ID_valC, 1);
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	4a1a      	ldr	r2, [pc, #104]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800070e:	4413      	add	r3, r2
 8000710:	7b7a      	ldrb	r2, [r7, #13]
 8000712:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	3301      	adds	r3, #1
 8000718:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, RxData, 2);
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	4a16      	ldr	r2, [pc, #88]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800071e:	4413      	add	r3, r2
 8000720:	4a11      	ldr	r2, [pc, #68]	; (8000768 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000722:	8812      	ldrh	r2, [r2, #0]
 8000724:	801a      	strh	r2, [r3, #0]
		nIndex_CAN +=2;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	3302      	adds	r3, #2
 800072a:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, ACK, 1);
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000730:	4413      	add	r3, r2
 8000732:	4a14      	ldr	r2, [pc, #80]	; (8000784 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000734:	7812      	ldrb	r2, [r2, #0]
 8000736:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
 800073a:	3301      	adds	r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
		memcpy(nTxData_CAN + nIndex_CAN, ETX, 1);
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000742:	4413      	add	r3, r2
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	701a      	strb	r2, [r3, #0]
		nIndex_CAN +=1;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	3301      	adds	r3, #1
 800074e:	73fb      	strb	r3, [r7, #15]
		WriteComm(nTxData_CAN, MAX_LEN);
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800075a:	f7ff feff 	bl	800055c <WriteComm>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001bc 	.word	0x200001bc
 800076c:	20000198 	.word	0x20000198
 8000770:	20000048 	.word	0x20000048
 8000774:	200001f0 	.word	0x200001f0
 8000778:	200001d8 	.word	0x200001d8
 800077c:	20000004 	.word	0x20000004
 8000780:	20000018 	.word	0x20000018
 8000784:	2000000c 	.word	0x2000000c
 8000788:	20000008 	.word	0x20000008
 800078c:	20000000 	.word	0x20000000
 8000790:	2000001c 	.word	0x2000001c

08000794 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_UART_RxCpltCallback+0x3c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d10e      	bne.n	80007c6 <HAL_UART_RxCpltCallback+0x32>
	{
		ReadComm(nRxData, MAX_LEN);
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <HAL_UART_RxCpltCallback+0x40>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4619      	mov	r1, r3
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <HAL_UART_RxCpltCallback+0x44>)
 80007b2:	f7ff feed 	bl	8000590 <ReadComm>
		HAL_UART_Receive_IT(&huart2, (uint8_t *)nRxData, MAX_LEN);
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <HAL_UART_RxCpltCallback+0x40>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	4906      	ldr	r1, [pc, #24]	; (80007d8 <HAL_UART_RxCpltCallback+0x44>)
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <HAL_UART_RxCpltCallback+0x3c>)
 80007c2:	f002 ff50 	bl	8003666 <HAL_UART_Receive_IT>
	}
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000007c 	.word	0x2000007c
 80007d4:	20000000 	.word	0x20000000
 80007d8:	200001c0 	.word	0x200001c0

080007dc <serialProcess>:

bool serialProcess(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint8_t nIndex =0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	71fb      	strb	r3, [r7, #7]
	if (bDataAvailable == true)
 80007e6:	4b5c      	ldr	r3, [pc, #368]	; (8000958 <serialProcess+0x17c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f000 80af 	beq.w	800094e <serialProcess+0x172>
	{
		if(StrCompare(strCommand, ONLD, 4))
 80007f0:	2204      	movs	r2, #4
 80007f2:	495a      	ldr	r1, [pc, #360]	; (800095c <serialProcess+0x180>)
 80007f4:	485a      	ldr	r0, [pc, #360]	; (8000960 <serialProcess+0x184>)
 80007f6:	f7ff fe8c 	bl	8000512 <StrCompare>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d066      	beq.n	80008ce <serialProcess+0xf2>
		{
			HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_12);
 8000800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000804:	4857      	ldr	r0, [pc, #348]	; (8000964 <serialProcess+0x188>)
 8000806:	f002 f9ec 	bl	8002be2 <HAL_GPIO_TogglePin>
			memcpy(nTxData + nIndex, STX, 1);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a56      	ldr	r2, [pc, #344]	; (8000968 <serialProcess+0x18c>)
 800080e:	4413      	add	r3, r2
 8000810:	4a56      	ldr	r2, [pc, #344]	; (800096c <serialProcess+0x190>)
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	701a      	strb	r2, [r3, #0]
			nIndex +=1;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	3301      	adds	r3, #1
 800081a:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, strCommand, 4);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4a52      	ldr	r2, [pc, #328]	; (8000968 <serialProcess+0x18c>)
 8000820:	4413      	add	r3, r2
 8000822:	4a4f      	ldr	r2, [pc, #316]	; (8000960 <serialProcess+0x184>)
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	601a      	str	r2, [r3, #0]
			nIndex +=4;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3304      	adds	r3, #4
 800082c:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, strOpt, 1);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <serialProcess+0x18c>)
 8000832:	4413      	add	r3, r2
 8000834:	4a4e      	ldr	r2, [pc, #312]	; (8000970 <serialProcess+0x194>)
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	701a      	strb	r2, [r3, #0]
			nIndex +=1;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	3301      	adds	r3, #1
 800083e:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, strData, 2);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4a49      	ldr	r2, [pc, #292]	; (8000968 <serialProcess+0x18c>)
 8000844:	4413      	add	r3, r2
 8000846:	4a4b      	ldr	r2, [pc, #300]	; (8000974 <serialProcess+0x198>)
 8000848:	8812      	ldrh	r2, [r2, #0]
 800084a:	801a      	strh	r2, [r3, #0]
			nIndex +=2;
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	3302      	adds	r3, #2
 8000850:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, ACK, 1);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a44      	ldr	r2, [pc, #272]	; (8000968 <serialProcess+0x18c>)
 8000856:	4413      	add	r3, r2
 8000858:	4a47      	ldr	r2, [pc, #284]	; (8000978 <serialProcess+0x19c>)
 800085a:	7812      	ldrb	r2, [r2, #0]
 800085c:	701a      	strb	r2, [r3, #0]
			nIndex +=1;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	3301      	adds	r3, #1
 8000862:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, ETX, 1);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a40      	ldr	r2, [pc, #256]	; (8000968 <serialProcess+0x18c>)
 8000868:	4413      	add	r3, r2
 800086a:	4a44      	ldr	r2, [pc, #272]	; (800097c <serialProcess+0x1a0>)
 800086c:	7812      	ldrb	r2, [r2, #0]
 800086e:	701a      	strb	r2, [r3, #0]
			nIndex +=1;
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	3301      	adds	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
			WriteComm(nTxData, MAX_LEN);
 8000876:	4b42      	ldr	r3, [pc, #264]	; (8000980 <serialProcess+0x1a4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4619      	mov	r1, r3
 800087e:	483a      	ldr	r0, [pc, #232]	; (8000968 <serialProcess+0x18c>)
 8000880:	f7ff fe6c 	bl	800055c <WriteComm>

			TxHeader.DLC = 2;
 8000884:	4b3f      	ldr	r3, [pc, #252]	; (8000984 <serialProcess+0x1a8>)
 8000886:	2202      	movs	r2, #2
 8000888:	611a      	str	r2, [r3, #16]
			TxHeader.ExtId = 0;
 800088a:	4b3e      	ldr	r3, [pc, #248]	; (8000984 <serialProcess+0x1a8>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
			TxHeader.IDE = CAN_ID_STD;
 8000890:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <serialProcess+0x1a8>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
			TxHeader.RTR = CAN_RTR_DATA;
 8000896:	4b3b      	ldr	r3, [pc, #236]	; (8000984 <serialProcess+0x1a8>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
			TxHeader.StdId = 0x0A;
 800089c:	4b39      	ldr	r3, [pc, #228]	; (8000984 <serialProcess+0x1a8>)
 800089e:	220a      	movs	r2, #10
 80008a0:	601a      	str	r2, [r3, #0]
			TxHeader.TransmitGlobalTime = DISABLE;
 80008a2:	4b38      	ldr	r3, [pc, #224]	; (8000984 <serialProcess+0x1a8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	751a      	strb	r2, [r3, #20]

			TxData[0] = nTxData[6]; // Data send to CAN BUS to turn on led with rule
 80008a8:	4b2f      	ldr	r3, [pc, #188]	; (8000968 <serialProcess+0x18c>)
 80008aa:	799a      	ldrb	r2, [r3, #6]
 80008ac:	4b36      	ldr	r3, [pc, #216]	; (8000988 <serialProcess+0x1ac>)
 80008ae:	701a      	strb	r2, [r3, #0]
			TxData[1] = nTxData[7];
 80008b0:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <serialProcess+0x18c>)
 80008b2:	79da      	ldrb	r2, [r3, #7]
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <serialProcess+0x1ac>)
 80008b6:	705a      	strb	r2, [r3, #1]

			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData,&TxMailbox) != HAL_OK)
 80008b8:	4b34      	ldr	r3, [pc, #208]	; (800098c <serialProcess+0x1b0>)
 80008ba:	4a33      	ldr	r2, [pc, #204]	; (8000988 <serialProcess+0x1ac>)
 80008bc:	4931      	ldr	r1, [pc, #196]	; (8000984 <serialProcess+0x1a8>)
 80008be:	4834      	ldr	r0, [pc, #208]	; (8000990 <serialProcess+0x1b4>)
 80008c0:	f000 fe84 	bl	80015cc <HAL_CAN_AddTxMessage>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d03e      	beq.n	8000948 <serialProcess+0x16c>
				{
					NVIC_SystemReset();
 80008ca:	f7ff fdfb 	bl	80004c4 <__NVIC_SystemReset>
			TxData[1] = nTxData[7];
			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData,&TxMailbox);
		}*/
else
		{
			memcpy(nTxData + nIndex, STX, 1);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	4a25      	ldr	r2, [pc, #148]	; (8000968 <serialProcess+0x18c>)
 80008d2:	4413      	add	r3, r2
 80008d4:	4a25      	ldr	r2, [pc, #148]	; (800096c <serialProcess+0x190>)
 80008d6:	7812      	ldrb	r2, [r2, #0]
 80008d8:	701a      	strb	r2, [r3, #0]
			nIndex +=1;
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	3301      	adds	r3, #1
 80008de:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, NUL, 4);
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4a21      	ldr	r2, [pc, #132]	; (8000968 <serialProcess+0x18c>)
 80008e4:	4413      	add	r3, r2
 80008e6:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <serialProcess+0x1b8>)
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	601a      	str	r2, [r3, #0]
			nIndex +=4;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	3304      	adds	r3, #4
 80008f0:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, (uint8_t *)strOpt, 1);
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <serialProcess+0x18c>)
 80008f6:	4413      	add	r3, r2
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <serialProcess+0x194>)
 80008fa:	7812      	ldrb	r2, [r2, #0]
 80008fc:	701a      	strb	r2, [r3, #0]
			nIndex +=3;
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	3303      	adds	r3, #3
 8000902:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, (uint8_t *)strData, 2);
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <serialProcess+0x18c>)
 8000908:	4413      	add	r3, r2
 800090a:	4a1a      	ldr	r2, [pc, #104]	; (8000974 <serialProcess+0x198>)
 800090c:	8812      	ldrh	r2, [r2, #0]
 800090e:	801a      	strh	r2, [r3, #0]
			nIndex +=8;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	3308      	adds	r3, #8
 8000914:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, ACK, 1);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	4a13      	ldr	r2, [pc, #76]	; (8000968 <serialProcess+0x18c>)
 800091a:	4413      	add	r3, r2
 800091c:	4a16      	ldr	r2, [pc, #88]	; (8000978 <serialProcess+0x19c>)
 800091e:	7812      	ldrb	r2, [r2, #0]
 8000920:	701a      	strb	r2, [r3, #0]
			nIndex +=1;
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	3301      	adds	r3, #1
 8000926:	71fb      	strb	r3, [r7, #7]
			memcpy(nTxData + nIndex, ETX, 1);
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <serialProcess+0x18c>)
 800092c:	4413      	add	r3, r2
 800092e:	4a13      	ldr	r2, [pc, #76]	; (800097c <serialProcess+0x1a0>)
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	701a      	strb	r2, [r3, #0]
			nIndex +=1;
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	3301      	adds	r3, #1
 8000938:	71fb      	strb	r3, [r7, #7]
			WriteComm(nTxData, MAX_LEN);
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <serialProcess+0x1a4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	4619      	mov	r1, r3
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <serialProcess+0x18c>)
 8000944:	f7ff fe0a 	bl	800055c <WriteComm>
		}	

bDataAvailable = false;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <serialProcess+0x17c>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	}
	return true;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001ee 	.word	0x200001ee
 800095c:	20000014 	.word	0x20000014
 8000960:	200001e4 	.word	0x200001e4
 8000964:	40020c00 	.word	0x40020c00
 8000968:	200001cc 	.word	0x200001cc
 800096c:	20000004 	.word	0x20000004
 8000970:	200001e8 	.word	0x200001e8
 8000974:	200001ec 	.word	0x200001ec
 8000978:	2000000c 	.word	0x2000000c
 800097c:	20000008 	.word	0x20000008
 8000980:	20000000 	.word	0x20000000
 8000984:	20000180 	.word	0x20000180
 8000988:	200001b8 	.word	0x200001b8
 800098c:	200001b4 	.word	0x200001b4
 8000990:	20000048 	.word	0x20000048
 8000994:	20000010 	.word	0x20000010

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 fb84 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f824 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 f94c 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 80009a8:	f000 f922 	bl	8000bf0 <MX_DMA_Init>
  MX_CAN1_Init();
 80009ac:	f000 f88a 	bl	8000ac4 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80009b0:	f000 f8f4 	bl	8000b9c <MX_USART2_UART_Init>
  MX_IWDG_Init();
 80009b4:	f000 f8d8 	bl	8000b68 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)nRxData, MAX_LEN);
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <main+0x44>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	b29b      	uxth	r3, r3
 80009be:	461a      	mov	r2, r3
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <main+0x48>)
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <main+0x4c>)
 80009c4:	f002 fe4f 	bl	8003666 <HAL_UART_Receive_IT>
  HAL_CAN_Start(&hcan1);
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <main+0x50>)
 80009ca:	f000 fdbb 	bl	8001544 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 80009ce:	2102      	movs	r1, #2
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <main+0x50>)
 80009d2:	f000 ffe8 	bl	80019a6 <HAL_CAN_ActivateNotification>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_IWDG_Refresh (&hiwdg);
		serialProcess();
 80009d6:	f7ff ff01 	bl	80007dc <serialProcess>
 80009da:	e7fc      	b.n	80009d6 <main+0x3e>
 80009dc:	20000000 	.word	0x20000000
 80009e0:	200001c0 	.word	0x200001c0
 80009e4:	2000007c 	.word	0x2000007c
 80009e8:	20000048 	.word	0x20000048

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	; 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2230      	movs	r2, #48	; 0x30
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 feb4 	bl	8004768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <SystemClock_Config+0xd0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <SystemClock_Config+0xd0>)
 8000a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <SystemClock_Config+0xd0>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a28:	60bb      	str	r3, [r7, #8]
 8000a2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a22      	ldr	r2, [pc, #136]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <SystemClock_Config+0xd4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000a48:	2309      	movs	r3, #9
 8000a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a52:	2301      	movs	r3, #1
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f910 	bl	8002c9c <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a82:	f000 f93d 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	2105      	movs	r1, #5
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f002 fb71 	bl	800318c <HAL_RCC_ClockConfig>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000ab0:	f000 f926 	bl	8000d00 <Error_Handler>
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3750      	adds	r7, #80	; 0x50
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000aca:	4b25      	ldr	r3, [pc, #148]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000acc:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <MX_CAN1_Init+0xa0>)
 8000ace:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000ad2:	2215      	movs	r2, #21
 8000ad4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000adc:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000ae4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ae8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b14:	4812      	ldr	r0, [pc, #72]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000b16:	f000 fb39 	bl	800118c <HAL_CAN_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b20:	f000 f8ee 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 8000b28:	230a      	movs	r3, #10
 8000b2a:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x000<<5;
 8000b30:	2300      	movs	r3, #0
 8000b32:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 8000b48:	230d      	movs	r3, #13
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MX_CAN1_Init+0x9c>)
 8000b52:	f000 fc17 	bl	8001384 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000048 	.word	0x20000048
 8000b64:	40006400 	.word	0x40006400

08000b68 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_IWDG_Init+0x2c>)
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <MX_IWDG_Init+0x30>)
 8000b70:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_IWDG_Init+0x2c>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 1499;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_IWDG_Init+0x2c>)
 8000b7a:	f240 52db 	movw	r2, #1499	; 0x5db
 8000b7e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_IWDG_Init+0x2c>)
 8000b82:	f002 f848 	bl	8002c16 <HAL_IWDG_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000b8c:	f000 f8b8 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000070 	.word	0x20000070
 8000b98:	40003000 	.word	0x40003000

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART2_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f002 fcfa 	bl	80035cc <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f88f 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000007c 	.word	0x2000007c
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <MX_DMA_Init+0x4c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2100      	movs	r1, #0
 8000c16:	2010      	movs	r0, #16
 8000c18:	f001 f9f5 	bl	8002006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c1c:	2010      	movs	r0, #16
 8000c1e:	f001 fa0e 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2011      	movs	r0, #17
 8000c28:	f001 f9ed 	bl	8002006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c2c:	2011      	movs	r0, #17
 8000c2e:	f001 fa06 	bl	800203e <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a26      	ldr	r2, [pc, #152]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a11      	ldr	r2, [pc, #68]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_GPIO_Init+0xb8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <MX_GPIO_Init+0xbc>)
 8000cce:	f001 ff6f 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0xbc>)
 8000cec:	f001 fdc4 	bl	8002878 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020c00 	.word	0x40020c00

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <HAL_CAN_MspInit+0xa4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d13c      	bne.n	8000df8 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <HAL_CAN_MspInit+0xa8>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <HAL_CAN_MspInit+0xa8>)
 8000d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <HAL_CAN_MspInit+0xa8>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <HAL_CAN_MspInit+0xa8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a18      	ldr	r2, [pc, #96]	; (8000e04 <HAL_CAN_MspInit+0xa8>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_CAN_MspInit+0xa8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dc8:	2309      	movs	r3, #9
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	; (8000e08 <HAL_CAN_MspInit+0xac>)
 8000dd4:	f001 fd50 	bl	8002878 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2014      	movs	r0, #20
 8000dde:	f001 f912 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000de2:	2014      	movs	r0, #20
 8000de4:	f001 f92b 	bl	800203e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2101      	movs	r1, #1
 8000dec:	2015      	movs	r0, #21
 8000dee:	f001 f90a 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000df2:	2015      	movs	r0, #21
 8000df4:	f001 f923 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40006400 	.word	0x40006400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a4c      	ldr	r2, [pc, #304]	; (8000f5c <HAL_UART_MspInit+0x150>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	f040 8092 	bne.w	8000f54 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <HAL_UART_MspInit+0x154>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a49      	ldr	r2, [pc, #292]	; (8000f60 <HAL_UART_MspInit+0x154>)
 8000e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <HAL_UART_MspInit+0x154>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4b43      	ldr	r3, [pc, #268]	; (8000f60 <HAL_UART_MspInit+0x154>)
 8000e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e54:	4a42      	ldr	r2, [pc, #264]	; (8000f60 <HAL_UART_MspInit+0x154>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5c:	4b40      	ldr	r3, [pc, #256]	; (8000f60 <HAL_UART_MspInit+0x154>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e68:	230c      	movs	r3, #12
 8000e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4838      	ldr	r0, [pc, #224]	; (8000f64 <HAL_UART_MspInit+0x158>)
 8000e84:	f001 fcf8 	bl	8002878 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e88:	4b37      	ldr	r3, [pc, #220]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e8a:	4a38      	ldr	r2, [pc, #224]	; (8000f6c <HAL_UART_MspInit+0x160>)
 8000e8c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e8e:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e98:	2240      	movs	r2, #64	; 0x40
 8000e9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ebc:	4b2a      	ldr	r3, [pc, #168]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ec2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000eca:	4827      	ldr	r0, [pc, #156]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000ecc:	f001 f8d2 	bl	8002074 <HAL_DMA_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000ed6:	f7ff ff13 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <HAL_UART_MspInit+0x15c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000ee8:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <HAL_UART_MspInit+0x168>)
 8000eea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ef2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f20:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f28:	4811      	ldr	r0, [pc, #68]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f2a:	f001 f8a3 	bl	8002074 <HAL_DMA_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8000f34:	f7ff fee4 	bl	8000d00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_UART_MspInit+0x164>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2026      	movs	r0, #38	; 0x26
 8000f4a:	f001 f85c 	bl	8002006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f4e:	2026      	movs	r0, #38	; 0x26
 8000f50:	f001 f875 	bl	800203e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000
 8000f68:	200000c0 	.word	0x200000c0
 8000f6c:	400260a0 	.word	0x400260a0
 8000f70:	20000120 	.word	0x20000120
 8000f74:	40026088 	.word	0x40026088

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f8c2 	bl	800114c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA1_Stream5_IRQHandler+0x10>)
 8000fd2:	f001 f9e7 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000120 	.word	0x20000120

08000fe0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fe4:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <DMA1_Stream6_IRQHandler+0x10>)
 8000fe6:	f001 f9dd 	bl	80023a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000c0 	.word	0x200000c0

08000ff4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	; (8001004 <CAN1_RX0_IRQHandler+0x10>)
 8000ffa:	f000 fcfa 	bl	80019f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000048 	.word	0x20000048

08001008 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <CAN1_RX1_IRQHandler+0x10>)
 800100e:	f000 fcf0 	bl	80019f2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000048 	.word	0x20000048

0800101c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <USART2_IRQHandler+0x10>)
 8001022:	f002 fbcf 	bl	80037c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000007c 	.word	0x2000007c

08001030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480d      	ldr	r0, [pc, #52]	; (800106c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001036:	490e      	ldr	r1, [pc, #56]	; (8001070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001038:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800104c:	4c0b      	ldr	r4, [pc, #44]	; (800107c <LoopFillZerobss+0x26>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800105a:	f000 f813 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105e:	f003 fb8b 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001062:	f7ff fc99 	bl	8000998 <main>
  bx  lr    
 8001066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800106c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001070:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001074:	08004808 	.word	0x08004808
  ldr r2, =_sbss
 8001078:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800107c:	200001f8 	.word	0x200001f8

08001080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC_IRQHandler>
	...

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_Init+0x40>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <HAL_Init+0x40>)
 80010be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <HAL_Init+0x40>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 ff8d 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f000 f808 	bl	80010ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010dc:	f7ff fe16 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023c00 	.word	0x40023c00

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_InitTick+0x54>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x58>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 ffa5 	bl	800205a <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e00e      	b.n	8001138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b0f      	cmp	r3, #15
 800111e:	d80a      	bhi.n	8001136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	2200      	movs	r2, #0
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 ff6d 	bl	8002006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <HAL_InitTick+0x5c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	e000      	b.n	8001138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000020 	.word	0x20000020
 8001144:	20000028 	.word	0x20000028
 8001148:	20000024 	.word	0x20000024

0800114c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x20>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x24>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4413      	add	r3, r2
 800115c:	4a04      	ldr	r2, [pc, #16]	; (8001170 <HAL_IncTick+0x24>)
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000028 	.word	0x20000028
 8001170:	200001f4 	.word	0x200001f4

08001174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_GetTick+0x14>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200001f4 	.word	0x200001f4

0800118c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0ed      	b.n	800137a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fdd6 	bl	8000d5c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c0:	f7ff ffd8 	bl	8001174 <HAL_GetTick>
 80011c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011c6:	e012      	b.n	80011ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011c8:	f7ff ffd4 	bl	8001174 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b0a      	cmp	r3, #10
 80011d4:	d90b      	bls.n	80011ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2205      	movs	r2, #5
 80011e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e0c5      	b.n	800137a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0e5      	beq.n	80011c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0202 	bic.w	r2, r2, #2
 800120a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff ffb2 	bl	8001174 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001212:	e012      	b.n	800123a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001214:	f7ff ffae 	bl	8001174 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d90b      	bls.n	800123a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2205      	movs	r2, #5
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e09f      	b.n	800137a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e5      	bne.n	8001214 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e1b      	ldrb	r3, [r3, #24]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d108      	bne.n	8001262 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7e5b      	ldrb	r3, [r3, #25]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d108      	bne.n	800128c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e007      	b.n	800129c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800129a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7e9b      	ldrb	r3, [r3, #26]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d108      	bne.n	80012b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0220 	orr.w	r2, r2, #32
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0220 	bic.w	r2, r2, #32
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7edb      	ldrb	r3, [r3, #27]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d108      	bne.n	80012e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0210 	bic.w	r2, r2, #16
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e007      	b.n	80012f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0210 	orr.w	r2, r2, #16
 80012ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7f1b      	ldrb	r3, [r3, #28]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d108      	bne.n	800130a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f042 0208 	orr.w	r2, r2, #8
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e007      	b.n	800131a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0208 	bic.w	r2, r2, #8
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7f5b      	ldrb	r3, [r3, #29]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d108      	bne.n	8001334 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0204 	orr.w	r2, r2, #4
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e007      	b.n	8001344 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0204 	bic.w	r2, r2, #4
 8001342:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	ea42 0103 	orr.w	r1, r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	1e5a      	subs	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800139c:	7cfb      	ldrb	r3, [r7, #19]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d003      	beq.n	80013aa <HAL_CAN_ConfigFilter+0x26>
 80013a2:	7cfb      	ldrb	r3, [r7, #19]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	f040 80be 	bne.w	8001526 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013aa:	4b65      	ldr	r3, [pc, #404]	; (8001540 <HAL_CAN_ConfigFilter+0x1bc>)
 80013ac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013b4:	f043 0201 	orr.w	r2, r3, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	431a      	orrs	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	2201      	movs	r2, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	401a      	ands	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d123      	bne.n	8001454 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800142e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3248      	adds	r2, #72	; 0x48
 8001434:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001448:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144a:	6979      	ldr	r1, [r7, #20]
 800144c:	3348      	adds	r3, #72	; 0x48
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d122      	bne.n	80014a2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	431a      	orrs	r2, r3
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800147c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3248      	adds	r2, #72	; 0x48
 8001482:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001496:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001498:	6979      	ldr	r1, [r7, #20]
 800149a:	3348      	adds	r3, #72	; 0x48
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	401a      	ands	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014bc:	e007      	b.n	80014ce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d109      	bne.n	80014ea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43db      	mvns	r3, r3
 80014e0:	401a      	ands	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80014e8:	e007      	b.n	80014fa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	431a      	orrs	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	431a      	orrs	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001518:	f023 0201 	bic.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e006      	b.n	8001534 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
  }
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	40006400 	.word	0x40006400

08001544 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d12e      	bne.n	80015b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff fe00 	bl	8001174 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001576:	e012      	b.n	800159e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001578:	f7ff fdfc 	bl	8001174 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b0a      	cmp	r3, #10
 8001584:	d90b      	bls.n	800159e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e012      	b.n	80015c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e5      	bne.n	8001578 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e006      	b.n	80015c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
  }
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b089      	sub	sp, #36	; 0x24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ea:	7ffb      	ldrb	r3, [r7, #31]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d003      	beq.n	80015f8 <HAL_CAN_AddTxMessage+0x2c>
 80015f0:	7ffb      	ldrb	r3, [r7, #31]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	f040 80b8 	bne.w	8001768 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10a      	bne.n	8001618 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80a0 	beq.w	8001758 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	0e1b      	lsrs	r3, r3, #24
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d907      	bls.n	8001638 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e09e      	b.n	8001776 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001638:	2201      	movs	r2, #1
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	409a      	lsls	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10d      	bne.n	8001666 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001654:	68f9      	ldr	r1, [r7, #12]
 8001656:	6809      	ldr	r1, [r1, #0]
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3318      	adds	r3, #24
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	440b      	add	r3, r1
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	e00f      	b.n	8001686 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001670:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001676:	68f9      	ldr	r1, [r7, #12]
 8001678:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800167a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3318      	adds	r3, #24
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	440b      	add	r3, r1
 8001684:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6819      	ldr	r1, [r3, #0]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3318      	adds	r3, #24
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	440b      	add	r3, r1
 8001696:	3304      	adds	r3, #4
 8001698:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	7d1b      	ldrb	r3, [r3, #20]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d111      	bne.n	80016c6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3318      	adds	r3, #24
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	4413      	add	r3, r2
 80016ae:	3304      	adds	r3, #4
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	6811      	ldr	r1, [r2, #0]
 80016b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3318      	adds	r3, #24
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	440b      	add	r3, r1
 80016c2:	3304      	adds	r3, #4
 80016c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3307      	adds	r3, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	061a      	lsls	r2, r3, #24
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3306      	adds	r3, #6
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3305      	adds	r3, #5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4313      	orrs	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	3204      	adds	r2, #4
 80016e6:	7812      	ldrb	r2, [r2, #0]
 80016e8:	4610      	mov	r0, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	6811      	ldr	r1, [r2, #0]
 80016ee:	ea43 0200 	orr.w	r2, r3, r0
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80016fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3303      	adds	r3, #3
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	061a      	lsls	r2, r3, #24
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3302      	adds	r3, #2
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	4313      	orrs	r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	4610      	mov	r0, r2
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	6811      	ldr	r1, [r2, #0]
 8001724:	ea43 0200 	orr.w	r2, r3, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	440b      	add	r3, r1
 800172e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001732:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3318      	adds	r3, #24
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6811      	ldr	r1, [r2, #0]
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3318      	adds	r3, #24
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e00e      	b.n	8001776 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e006      	b.n	8001776 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	3724      	adds	r7, #36	; 0x24
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001782:	b480      	push	{r7}
 8001784:	b087      	sub	sp, #28
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001796:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001798:	7dfb      	ldrb	r3, [r7, #23]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_GetRxMessage+0x24>
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	f040 80f3 	bne.w	800198c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10e      	bne.n	80017ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0e7      	b.n	800199a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d8      	b.n	800199a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	331b      	adds	r3, #27
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0204 	and.w	r2, r3, #4
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	331b      	adds	r3, #27
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0d5b      	lsrs	r3, r3, #21
 8001816:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	e00b      	b.n	8001838 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	331b      	adds	r3, #27
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	4413      	add	r3, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	331b      	adds	r3, #27
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	4413      	add	r3, r2
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0202 	and.w	r2, r3, #2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	331b      	adds	r3, #27
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	3304      	adds	r3, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 020f 	and.w	r2, r3, #15
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	331b      	adds	r3, #27
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	3304      	adds	r3, #4
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b2da      	uxtb	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	331b      	adds	r3, #27
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	4413      	add	r3, r2
 800188a:	3304      	adds	r3, #4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	b29a      	uxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4413      	add	r3, r2
 80018a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	4413      	add	r3, r2
 80018b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0a1a      	lsrs	r2, r3, #8
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	4413      	add	r3, r2
 80018d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0c1a      	lsrs	r2, r3, #16
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3302      	adds	r3, #2
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0e1a      	lsrs	r2, r3, #24
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	3303      	adds	r3, #3
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3304      	adds	r3, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0a1a      	lsrs	r2, r3, #8
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	3305      	adds	r3, #5
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0c1a      	lsrs	r2, r3, #16
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3306      	adds	r3, #6
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0e1a      	lsrs	r2, r3, #24
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	3307      	adds	r3, #7
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d108      	bne.n	8001978 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0220 	orr.w	r2, r2, #32
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	e007      	b.n	8001988 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0220 	orr.w	r2, r2, #32
 8001986:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	e006      	b.n	800199a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
  }
}
 800199a:	4618      	mov	r0, r3
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b085      	sub	sp, #20
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d002      	beq.n	80019c4 <HAL_CAN_ActivateNotification+0x1e>
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d109      	bne.n	80019d8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6959      	ldr	r1, [r3, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e006      	b.n	80019e6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
  }
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08a      	sub	sp, #40	; 0x28
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d07c      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d023      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f000 f983 	bl	8001d60 <HAL_CAN_TxMailbox0CompleteCallback>
 8001a5a:	e016      	b.n	8001a8a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	e00c      	b.n	8001a8a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
 8001a82:	e002      	b.n	8001a8a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f989 	bl	8001d9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d024      	beq.n	8001ade <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f963 	bl	8001d74 <HAL_CAN_TxMailbox1CompleteCallback>
 8001aae:	e016      	b.n	8001ade <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d004      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e00c      	b.n	8001ade <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d004      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	e002      	b.n	8001ade <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f969 	bl	8001db0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d024      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001af0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f943 	bl	8001d88 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b02:	e016      	b.n	8001b32 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	e00c      	b.n	8001b32 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2a:	e002      	b.n	8001b32 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f949 	bl	8001dc4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00c      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2210      	movs	r2, #16
 8001b54:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b56:	6a3b      	ldr	r3, [r7, #32]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00b      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f930 	bl	8001dd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7fe fd47 	bl	8000624 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00c      	beq.n	8001bba <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	f003 0320 	and.w	r3, r3, #32
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00b      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f912 	bl	8001e00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8f9 	bl	8001dec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2210      	movs	r2, #16
 8001c14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8fc 	bl	8001e14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d006      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2208      	movs	r2, #8
 8001c36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f8f5 	bl	8001e28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d07b      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d072      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d008      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d008      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d043      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d03e      	beq.n	8001d38 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cc0:	2b60      	cmp	r3, #96	; 0x60
 8001cc2:	d02b      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x32a>
 8001cc4:	2b60      	cmp	r3, #96	; 0x60
 8001cc6:	d82e      	bhi.n	8001d26 <HAL_CAN_IRQHandler+0x334>
 8001cc8:	2b50      	cmp	r3, #80	; 0x50
 8001cca:	d022      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x320>
 8001ccc:	2b50      	cmp	r3, #80	; 0x50
 8001cce:	d82a      	bhi.n	8001d26 <HAL_CAN_IRQHandler+0x334>
 8001cd0:	2b40      	cmp	r3, #64	; 0x40
 8001cd2:	d019      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x316>
 8001cd4:	2b40      	cmp	r3, #64	; 0x40
 8001cd6:	d826      	bhi.n	8001d26 <HAL_CAN_IRQHandler+0x334>
 8001cd8:	2b30      	cmp	r3, #48	; 0x30
 8001cda:	d010      	beq.n	8001cfe <HAL_CAN_IRQHandler+0x30c>
 8001cdc:	2b30      	cmp	r3, #48	; 0x30
 8001cde:	d822      	bhi.n	8001d26 <HAL_CAN_IRQHandler+0x334>
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	d002      	beq.n	8001cea <HAL_CAN_IRQHandler+0x2f8>
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d005      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ce8:	e01d      	b.n	8001d26 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cf2:	e019      	b.n	8001d28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfc:	e014      	b.n	8001d28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	f043 0320 	orr.w	r3, r3, #32
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d06:	e00f      	b.n	8001d28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d10:	e00a      	b.n	8001d28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d1a:	e005      	b.n	8001d28 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d24:	e000      	b.n	8001d28 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d26:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d36:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f872 	bl	8001e3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <__NVIC_SetPriorityGrouping>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e82:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <__NVIC_SetPriorityGrouping+0x44>)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	60d3      	str	r3, [r2, #12]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_GetPriorityGrouping>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	0a1b      	lsrs	r3, r3, #8
 8001ea2:	f003 0307 	and.w	r3, r3, #7
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_EnableIRQ>:
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db0b      	blt.n	8001ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	f003 021f 	and.w	r2, r3, #31
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <__NVIC_EnableIRQ+0x38>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100

08001ef0 <__NVIC_SetPriority>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db0a      	blt.n	8001f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	490c      	ldr	r1, [pc, #48]	; (8001f3c <__NVIC_SetPriority+0x4c>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	440b      	add	r3, r1
 8001f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f18:	e00a      	b.n	8001f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4908      	ldr	r1, [pc, #32]	; (8001f40 <__NVIC_SetPriority+0x50>)
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	3b04      	subs	r3, #4
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	761a      	strb	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000e100 	.word	0xe000e100
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <NVIC_EncodePriority>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f1c3 0307 	rsb	r3, r3, #7
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	bf28      	it	cs
 8001f62:	2304      	movcs	r3, #4
 8001f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d902      	bls.n	8001f74 <NVIC_EncodePriority+0x30>
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3b03      	subs	r3, #3
 8001f72:	e000      	b.n	8001f76 <NVIC_EncodePriority+0x32>
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	401a      	ands	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f9c:	4313      	orrs	r3, r2
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3724      	adds	r7, #36	; 0x24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbc:	d301      	bcc.n	8001fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00f      	b.n	8001fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fc2:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <SysTick_Config+0x40>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fca:	210f      	movs	r1, #15
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f7ff ff8e 	bl	8001ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <SysTick_Config+0x40>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fda:	4b04      	ldr	r3, [pc, #16]	; (8001fec <SysTick_Config+0x40>)
 8001fdc:	2207      	movs	r2, #7
 8001fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000e010 	.word	0xe000e010

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ff29 	bl	8001e50 <__NVIC_SetPriorityGrouping>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
 8002012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002018:	f7ff ff3e 	bl	8001e98 <__NVIC_GetPriorityGrouping>
 800201c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68b9      	ldr	r1, [r7, #8]
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f7ff ff8e 	bl	8001f44 <NVIC_EncodePriority>
 8002028:	4602      	mov	r2, r0
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff5d 	bl	8001ef0 <__NVIC_SetPriority>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff31 	bl	8001eb4 <__NVIC_EnableIRQ>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff ffa2 	bl	8001fac <SysTick_Config>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff f878 	bl	8001174 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e099      	b.n	80021c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b0:	e00f      	b.n	80020d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020b2:	f7ff f85f 	bl	8001174 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d908      	bls.n	80020d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2203      	movs	r2, #3
 80020ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e078      	b.n	80021c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e8      	bne.n	80020b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	4b38      	ldr	r3, [pc, #224]	; (80021cc <HAL_DMA_Init+0x158>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	2b04      	cmp	r3, #4
 800212a:	d107      	bne.n	800213c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4313      	orrs	r3, r2
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f023 0307 	bic.w	r3, r3, #7
 8002152:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	2b04      	cmp	r3, #4
 8002164:	d117      	bne.n	8002196 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00e      	beq.n	8002196 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fb01 	bl	8002780 <DMA_CheckFifoParam>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002192:	2301      	movs	r3, #1
 8002194:	e016      	b.n	80021c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fab8 	bl	8002714 <DMA_CalcBaseAndBitshift>
 80021a4:	4603      	mov	r3, r0
 80021a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	223f      	movs	r2, #63	; 0x3f
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	f010803f 	.word	0xf010803f

080021d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_DMA_Start_IT+0x26>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e040      	b.n	8002278 <HAL_DMA_Start_IT+0xa8>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d12f      	bne.n	800226a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 fa4a 	bl	80026b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	223f      	movs	r2, #63	; 0x3f
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0216 	orr.w	r2, r2, #22
 800223e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0208 	orr.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e005      	b.n	8002276 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002272:	2302      	movs	r3, #2
 8002274:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002276:	7dfb      	ldrb	r3, [r7, #23]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800228e:	f7fe ff71 	bl	8001174 <HAL_GetTick>
 8002292:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d008      	beq.n	80022b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2280      	movs	r2, #128	; 0x80
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e052      	b.n	8002358 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0216 	bic.w	r2, r2, #22
 80022c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_DMA_Abort+0x62>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0208 	bic.w	r2, r2, #8
 80022f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	e013      	b.n	800232c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002304:	f7fe ff36 	bl	8001174 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b05      	cmp	r3, #5
 8002310:	d90c      	bls.n	800232c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2203      	movs	r2, #3
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e015      	b.n	8002358 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e4      	bne.n	8002304 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	223f      	movs	r2, #63	; 0x3f
 8002340:	409a      	lsls	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d004      	beq.n	800237e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00c      	b.n	8002398 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2205      	movs	r2, #5
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023b0:	4b8e      	ldr	r3, [pc, #568]	; (80025ec <HAL_DMA_IRQHandler+0x248>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a8e      	ldr	r2, [pc, #568]	; (80025f0 <HAL_DMA_IRQHandler+0x24c>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	0a9b      	lsrs	r3, r3, #10
 80023bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2208      	movs	r2, #8
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01a      	beq.n	8002410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d013      	beq.n	8002410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0204 	bic.w	r2, r2, #4
 80023f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2208      	movs	r2, #8
 80023fe:	409a      	lsls	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	2201      	movs	r2, #1
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d012      	beq.n	8002446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2201      	movs	r2, #1
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f043 0202 	orr.w	r2, r3, #2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	2204      	movs	r2, #4
 800244c:	409a      	lsls	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00b      	beq.n	800247c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2204      	movs	r2, #4
 800246a:	409a      	lsls	r2, r3
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002474:	f043 0204 	orr.w	r2, r3, #4
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002480:	2210      	movs	r2, #16
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d043      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d03c      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249e:	2210      	movs	r2, #16
 80024a0:	409a      	lsls	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d018      	beq.n	80024e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d108      	bne.n	80024d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d024      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	4798      	blx	r3
 80024d2:	e01f      	b.n	8002514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	4798      	blx	r3
 80024e4:	e016      	b.n	8002514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d107      	bne.n	8002504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0208 	bic.w	r2, r2, #8
 8002502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2220      	movs	r2, #32
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 808f 	beq.w	8002644 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8087 	beq.w	8002644 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	2220      	movs	r2, #32
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b05      	cmp	r3, #5
 800254c:	d136      	bne.n	80025bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0216 	bic.w	r2, r2, #22
 800255c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_DMA_IRQHandler+0x1da>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	223f      	movs	r2, #63	; 0x3f
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d07e      	beq.n	80026b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
        }
        return;
 80025ba:	e079      	b.n	80026b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01d      	beq.n	8002606 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d031      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
 80025e8:	e02c      	b.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
 80025ea:	bf00      	nop
 80025ec:	20000020 	.word	0x20000020
 80025f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d023      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4798      	blx	r3
 8002604:	e01e      	b.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0210 	bic.w	r2, r2, #16
 8002622:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	2b00      	cmp	r3, #0
 800264a:	d032      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d022      	beq.n	800269e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2205      	movs	r2, #5
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	3301      	adds	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	d307      	bcc.n	800268c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f2      	bne.n	8002670 <HAL_DMA_IRQHandler+0x2cc>
 800268a:	e000      	b.n	800268e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800268c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
 80026ae:	e000      	b.n	80026b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80026b0:	bf00      	nop
    }
  }
}
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d108      	bne.n	80026f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026f6:	e007      	b.n	8002708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	60da      	str	r2, [r3, #12]
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	3b10      	subs	r3, #16
 8002724:	4a14      	ldr	r2, [pc, #80]	; (8002778 <DMA_CalcBaseAndBitshift+0x64>)
 8002726:	fba2 2303 	umull	r2, r3, r2, r3
 800272a:	091b      	lsrs	r3, r3, #4
 800272c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <DMA_CalcBaseAndBitshift+0x68>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d909      	bls.n	8002756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	1d1a      	adds	r2, r3, #4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	; 0x58
 8002754:	e007      	b.n	8002766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800275e:	f023 0303 	bic.w	r3, r3, #3
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	aaaaaaab 	.word	0xaaaaaaab
 800277c:	080047f0 	.word	0x080047f0

08002780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d11f      	bne.n	80027da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d856      	bhi.n	800284e <DMA_CheckFifoParam+0xce>
 80027a0:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <DMA_CheckFifoParam+0x28>)
 80027a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a6:	bf00      	nop
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027cb 	.word	0x080027cb
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	0800284f 	.word	0x0800284f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d046      	beq.n	8002852 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e043      	b.n	8002852 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d2:	d140      	bne.n	8002856 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d8:	e03d      	b.n	8002856 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e2:	d121      	bne.n	8002828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d837      	bhi.n	800285a <DMA_CheckFifoParam+0xda>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <DMA_CheckFifoParam+0x70>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002801 	.word	0x08002801
 80027f4:	08002807 	.word	0x08002807
 80027f8:	08002801 	.word	0x08002801
 80027fc:	08002819 	.word	0x08002819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
      break;
 8002804:	e030      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d025      	beq.n	800285e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002816:	e022      	b.n	800285e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002820:	d11f      	bne.n	8002862 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002826:	e01c      	b.n	8002862 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d903      	bls.n	8002836 <DMA_CheckFifoParam+0xb6>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d003      	beq.n	800283c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002834:	e018      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
      break;
 800283a:	e015      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00e      	beq.n	8002866 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      break;
 800284c:	e00b      	b.n	8002866 <DMA_CheckFifoParam+0xe6>
      break;
 800284e:	bf00      	nop
 8002850:	e00a      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002852:	bf00      	nop
 8002854:	e008      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002856:	bf00      	nop
 8002858:	e006      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 800285a:	bf00      	nop
 800285c:	e004      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 800285e:	bf00      	nop
 8002860:	e002      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;   
 8002862:	bf00      	nop
 8002864:	e000      	b.n	8002868 <DMA_CheckFifoParam+0xe8>
      break;
 8002866:	bf00      	nop
    }
  } 
  
  return status; 
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	; 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e16b      	b.n	8002b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 815a 	bne.w	8002b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d130      	bne.n	800292c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d017      	beq.n	8002968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d123      	bne.n	80029bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80b4 	beq.w	8002b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b60      	ldr	r3, [pc, #384]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	4a5f      	ldr	r2, [pc, #380]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a0e:	4b5d      	ldr	r3, [pc, #372]	; (8002b84 <HAL_GPIO_Init+0x30c>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1a:	4a5b      	ldr	r2, [pc, #364]	; (8002b88 <HAL_GPIO_Init+0x310>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_GPIO_Init+0x314>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02b      	beq.n	8002a9e <HAL_GPIO_Init+0x226>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a51      	ldr	r2, [pc, #324]	; (8002b90 <HAL_GPIO_Init+0x318>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_Init+0x222>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a50      	ldr	r2, [pc, #320]	; (8002b94 <HAL_GPIO_Init+0x31c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_Init+0x21e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_GPIO_Init+0x320>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x21a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <HAL_GPIO_Init+0x324>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x216>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4d      	ldr	r2, [pc, #308]	; (8002ba0 <HAL_GPIO_Init+0x328>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x212>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4c      	ldr	r2, [pc, #304]	; (8002ba4 <HAL_GPIO_Init+0x32c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x20e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <HAL_GPIO_Init+0x330>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x20a>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e00e      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a82:	2308      	movs	r3, #8
 8002a84:	e00c      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a86:	2306      	movs	r3, #6
 8002a88:	e00a      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a8a:	2305      	movs	r3, #5
 8002a8c:	e008      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a92:	2303      	movs	r3, #3
 8002a94:	e004      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x228>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f002 0203 	and.w	r2, r2, #3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4093      	lsls	r3, r2
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab0:	4935      	ldr	r1, [pc, #212]	; (8002b88 <HAL_GPIO_Init+0x310>)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4013      	ands	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ae2:	4a32      	ldr	r2, [pc, #200]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae8:	4b30      	ldr	r3, [pc, #192]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d003      	beq.n	8002b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b12:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <HAL_GPIO_Init+0x334>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	61fb      	str	r3, [r7, #28]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	f67f ae90 	bls.w	8002894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40020000 	.word	0x40020000
 8002b90:	40020400 	.word	0x40020400
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	40021400 	.word	0x40021400
 8002ba4:	40021800 	.word	0x40021800
 8002ba8:	40021c00 	.word	0x40021c00
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf4:	887a      	ldrh	r2, [r7, #2]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	041a      	lsls	r2, r3, #16
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43d9      	mvns	r1, r3
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	400b      	ands	r3, r1
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e034      	b.n	8002c92 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002c30:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f245 5255 	movw	r2, #21845	; 0x5555
 8002c3a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6852      	ldr	r2, [r2, #4]
 8002c44:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6892      	ldr	r2, [r2, #8]
 8002c4e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002c50:	f7fe fa90 	bl	8001174 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002c56:	e00f      	b.n	8002c78 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002c58:	f7fe fa8c 	bl	8001174 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b31      	cmp	r3, #49	; 0x31
 8002c64:	d908      	bls.n	8002c78 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e00c      	b.n	8002c92 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e8      	bne.n	8002c58 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e267      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d075      	beq.n	8002da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc6:	4b85      	ldr	r3, [pc, #532]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d112      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x108>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d157      	bne.n	8002da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e242      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x74>
 8002d02:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x98>
 8002d1a:	4b70      	ldr	r3, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6f      	ldr	r2, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6c      	ldr	r2, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d34:	4b69      	ldr	r3, [pc, #420]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a68      	ldr	r2, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fa0e 	bl	8001174 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fa0a 	bl	8001174 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e207      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xc0>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f9fa 	bl	8001174 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe f9f6 	bl	8001174 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1f3      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b51      	ldr	r3, [pc, #324]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0xe8>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c7      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4937      	ldr	r1, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe f9af 	bl	8001174 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe f9ab 	bl	8001174 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1a8      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4925      	ldr	r1, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe f98e 	bl	8001174 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe f98a 	bl	8001174 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e187      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d036      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe f96e 	bl	8001174 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe f96a 	bl	8001174 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e167      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x200>
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe f957 	bl	8001174 <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eca:	f7fe f953 	bl	8001174 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d907      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e150      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470000 	.word	0x42470000
 8002ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ea      	bne.n	8002eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8097 	beq.w	8003030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a7c      	ldr	r2, [pc, #496]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b7a      	ldr	r3, [pc, #488]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b77      	ldr	r3, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b74      	ldr	r3, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a73      	ldr	r2, [pc, #460]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f913 	bl	8001174 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe f90f 	bl	8001174 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e10c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2ea>
 8002f78:	4b64      	ldr	r3, [pc, #400]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a63      	ldr	r2, [pc, #396]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x30c>
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002fa8:	4b58      	ldr	r3, [pc, #352]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	4b55      	ldr	r3, [pc, #340]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a54      	ldr	r2, [pc, #336]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f8d4 	bl	8001174 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f8d0 	bl	8001174 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0cb      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ee      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x334>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f8be 	bl	8001174 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f8ba 	bl	8001174 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0b5      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	4b3e      	ldr	r3, [pc, #248]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003024:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_RCC_OscConfig+0x470>)
 800302a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a1 	beq.w	800317c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x470>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d05c      	beq.n	8003100 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d141      	bne.n	80030d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe f88e 	bl	8001174 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe f88a 	bl	8001174 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e087      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b27      	ldr	r3, [pc, #156]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe f863 	bl	8001174 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe f85f 	bl	8001174 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e05c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x416>
 80030d0:	e054      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe f84c 	bl	8001174 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe f848 	bl	8001174 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e045      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x444>
 80030fe:	e03d      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e038      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000
 8003114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x4ec>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d028      	beq.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d121      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11a      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800314e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cc      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d90c      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d044      	beq.n	80032ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d119      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	2b03      	cmp	r3, #3
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e067      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4934      	ldr	r1, [pc, #208]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fd ff7a 	bl	8001174 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fd ff76 	bl	8001174 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e04f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d20c      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd feda 	bl	80010ec <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00
 8003348:	40023800 	.word	0x40023800
 800334c:	080047d8 	.word	0x080047d8
 8003350:	20000020 	.word	0x20000020
 8003354:	20000024 	.word	0x20000024

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b094      	sub	sp, #80	; 0x50
 800335e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
 8003364:	2300      	movs	r3, #0
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	2300      	movs	r3, #0
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	4b79      	ldr	r3, [pc, #484]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d00d      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 800337c:	2b08      	cmp	r3, #8
 800337e:	f200 80e1 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003386:	2b04      	cmp	r3, #4
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x3a>
 800338a:	e0db      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_GetSysClockFreq+0x204>)
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003390:	e0db      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003392:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_GetSysClockFreq+0x208>)
 8003394:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003396:	e0d8      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003398:	4b6f      	ldr	r3, [pc, #444]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d063      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
 80033c2:	2300      	movs	r3, #0
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
 80033c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ca:	4622      	mov	r2, r4
 80033cc:	462b      	mov	r3, r5
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	0159      	lsls	r1, r3, #5
 80033d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033dc:	0150      	lsls	r0, r2, #5
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4621      	mov	r1, r4
 80033e4:	1a51      	subs	r1, r2, r1
 80033e6:	6139      	str	r1, [r7, #16]
 80033e8:	4629      	mov	r1, r5
 80033ea:	eb63 0301 	sbc.w	r3, r3, r1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033fc:	4659      	mov	r1, fp
 80033fe:	018b      	lsls	r3, r1, #6
 8003400:	4651      	mov	r1, sl
 8003402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003406:	4651      	mov	r1, sl
 8003408:	018a      	lsls	r2, r1, #6
 800340a:	4651      	mov	r1, sl
 800340c:	ebb2 0801 	subs.w	r8, r2, r1
 8003410:	4659      	mov	r1, fp
 8003412:	eb63 0901 	sbc.w	r9, r3, r1
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342a:	4690      	mov	r8, r2
 800342c:	4699      	mov	r9, r3
 800342e:	4623      	mov	r3, r4
 8003430:	eb18 0303 	adds.w	r3, r8, r3
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	462b      	mov	r3, r5
 8003438:	eb49 0303 	adc.w	r3, r9, r3
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800344a:	4629      	mov	r1, r5
 800344c:	024b      	lsls	r3, r1, #9
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003454:	4621      	mov	r1, r4
 8003456:	024a      	lsls	r2, r1, #9
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345e:	2200      	movs	r2, #0
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
 8003462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003468:	f7fc feae 	bl	80001c8 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003474:	e058      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	2200      	movs	r2, #0
 800347e:	4618      	mov	r0, r3
 8003480:	4611      	mov	r1, r2
 8003482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	0159      	lsls	r1, r3, #5
 800349e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a2:	0150      	lsls	r0, r2, #5
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4641      	mov	r1, r8
 80034aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034c8:	ebb2 040a 	subs.w	r4, r2, sl
 80034cc:	eb63 050b 	sbc.w	r5, r3, fp
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	00eb      	lsls	r3, r5, #3
 80034da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034de:	00e2      	lsls	r2, r4, #3
 80034e0:	4614      	mov	r4, r2
 80034e2:	461d      	mov	r5, r3
 80034e4:	4643      	mov	r3, r8
 80034e6:	18e3      	adds	r3, r4, r3
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	464b      	mov	r3, r9
 80034ec:	eb45 0303 	adc.w	r3, r5, r3
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	61fa      	str	r2, [r7, #28]
 8003518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800351c:	f7fc fe54 	bl	80001c8 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetSysClockFreq+0x204>)
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800354c:	4618      	mov	r0, r3
 800354e:	3750      	adds	r7, #80	; 0x50
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	00f42400 	.word	0x00f42400
 8003560:	007a1200 	.word	0x007a1200

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000020 	.word	0x20000020

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a9b      	lsrs	r3, r3, #10
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	080047e8 	.word	0x080047e8

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffdc 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0b5b      	lsrs	r3, r3, #13
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	080047e8 	.word	0x080047e8

080035cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e03f      	b.n	800365e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fd fc0a 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800360e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fe35 	bl	8004280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b20      	cmp	r3, #32
 800367e:	d11d      	bne.n	80036bc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Receive_IT+0x26>
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e016      	b.n	80036be <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_UART_Receive_IT+0x38>
 800369a:	2302      	movs	r3, #2
 800369c:	e00f      	b.n	80036be <HAL_UART_Receive_IT+0x58>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fbe3 	bl	8003e7e <UART_Start_Receive_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	e000      	b.n	80036be <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d165      	bne.n	80037ae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_Transmit_DMA+0x26>
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e05e      	b.n	80037b0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_UART_Transmit_DMA+0x38>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e057      	b.n	80037b0 <HAL_UART_Transmit_DMA+0xe8>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88fa      	ldrh	r2, [r7, #6]
 8003712:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	88fa      	ldrh	r2, [r7, #6]
 8003718:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2221      	movs	r2, #33	; 0x21
 8003724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	4a22      	ldr	r2, [pc, #136]	; (80037b8 <HAL_UART_Transmit_DMA+0xf0>)
 800372e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003734:	4a21      	ldr	r2, [pc, #132]	; (80037bc <HAL_UART_Transmit_DMA+0xf4>)
 8003736:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	4a20      	ldr	r2, [pc, #128]	; (80037c0 <HAL_UART_Transmit_DMA+0xf8>)
 800373e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003744:	2200      	movs	r2, #0
 8003746:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	6819      	ldr	r1, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3304      	adds	r3, #4
 800375c:	461a      	mov	r2, r3
 800375e:	88fb      	ldrh	r3, [r7, #6]
 8003760:	f7fe fd36 	bl	80021d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800376c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	617b      	str	r3, [r7, #20]
   return(result);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3314      	adds	r3, #20
 8003794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003796:	627a      	str	r2, [r7, #36]	; 0x24
 8003798:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379a:	6a39      	ldr	r1, [r7, #32]
 800379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800379e:	e841 2300 	strex	r3, r2, [r1]
 80037a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1e5      	bne.n	8003776 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e000      	b.n	80037b0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3730      	adds	r7, #48	; 0x30
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	08003d35 	.word	0x08003d35
 80037bc:	08003dcf 	.word	0x08003dcf
 80037c0:	08003deb 	.word	0x08003deb

080037c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b0ba      	sub	sp, #232	; 0xe8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10f      	bne.n	800382a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800380a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380e:	f003 0320 	and.w	r3, r3, #32
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_UART_IRQHandler+0x66>
 8003816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fc70 	bl	8004108 <UART_Receive_IT>
      return;
 8003828:	e256      	b.n	8003cd8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800382a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80de 	beq.w	80039f0 <HAL_UART_IRQHandler+0x22c>
 8003834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003844:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 80d1 	beq.w	80039f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_UART_IRQHandler+0xae>
 800385a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f043 0201 	orr.w	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_UART_IRQHandler+0xd2>
 800387e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d005      	beq.n	8003896 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_UART_IRQHandler+0xf6>
 80038a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d011      	beq.n	80038ea <HAL_UART_IRQHandler+0x126>
 80038c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d105      	bne.n	80038de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0208 	orr.w	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 81ed 	beq.w	8003cce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_UART_IRQHandler+0x14e>
 8003900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fbfb 	bl	8004108 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_UART_IRQHandler+0x17a>
 8003936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d04f      	beq.n	80039de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fb03 	bl	8003f4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d141      	bne.n	80039d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003968:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800396c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003970:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	3314      	adds	r3, #20
 800397a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800397e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800398a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1d9      	bne.n	8003952 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d013      	beq.n	80039ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	4a7d      	ldr	r2, [pc, #500]	; (8003ba0 <HAL_UART_IRQHandler+0x3dc>)
 80039ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fcd4 	bl	8002360 <HAL_DMA_Abort_IT>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039c8:	4610      	mov	r0, r2
 80039ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	e00e      	b.n	80039ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f99a 	bl	8003d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	e00a      	b.n	80039ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f996 	bl	8003d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e006      	b.n	80039ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f992 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039ea:	e170      	b.n	8003cce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	bf00      	nop
    return;
 80039ee:	e16e      	b.n	8003cce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	f040 814a 	bne.w	8003c8e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f000 8143 	beq.w	8003c8e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 813c 	beq.w	8003c8e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	f040 80b4 	bne.w	8003ba4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8140 	beq.w	8003cd2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	f080 8139 	bcs.w	8003cd2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a66:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a72:	f000 8088 	beq.w	8003b86 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003aa2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003aae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003aba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1d9      	bne.n	8003a76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3314      	adds	r3, #20
 8003ac8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003acc:	e853 3f00 	ldrex	r3, [r3]
 8003ad0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3314      	adds	r3, #20
 8003ae2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ae6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003aea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e1      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3314      	adds	r3, #20
 8003b04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e3      	bne.n	8003afe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b68:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b6a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e3      	bne.n	8003b44 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fb7d 	bl	8002280 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8c0 	bl	8003d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b9c:	e099      	b.n	8003cd2 <HAL_UART_IRQHandler+0x50e>
 8003b9e:	bf00      	nop
 8003ba0:	08004011 	.word	0x08004011
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 808b 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8086 	beq.w	8003cd6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003be0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	330c      	adds	r3, #12
 8003bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003bee:	647a      	str	r2, [r7, #68]	; 0x44
 8003bf0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1e3      	bne.n	8003bca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	623b      	str	r3, [r7, #32]
   return(result);
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c26:	633a      	str	r2, [r7, #48]	; 0x30
 8003c28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e3      	bne.n	8003c02 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0310 	bic.w	r3, r3, #16
 8003c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	330c      	adds	r3, #12
 8003c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c6c:	61fa      	str	r2, [r7, #28]
 8003c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	617b      	str	r3, [r7, #20]
   return(result);
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e3      	bne.n	8003c48 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c84:	4619      	mov	r1, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f848 	bl	8003d1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c8c:	e023      	b.n	8003cd6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_UART_IRQHandler+0x4ea>
 8003c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f9c6 	bl	8004038 <UART_Transmit_IT>
    return;
 8003cac:	e014      	b.n	8003cd8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00e      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x514>
 8003cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa06 	bl	80040d8 <UART_EndTransmit_IT>
    return;
 8003ccc:	e004      	b.n	8003cd8 <HAL_UART_IRQHandler+0x514>
    return;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <HAL_UART_IRQHandler+0x514>
      return;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <HAL_UART_IRQHandler+0x514>
      return;
 8003cd6:	bf00      	nop
  }
}
 8003cd8:	37e8      	adds	r7, #232	; 0xe8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop

08003ce0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b090      	sub	sp, #64	; 0x40
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d137      	bne.n	8003dc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	2200      	movs	r2, #0
 8003d54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	623b      	str	r3, [r7, #32]
   return(result);
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d76:	633a      	str	r2, [r7, #48]	; 0x30
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e5      	bne.n	8003d56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	330c      	adds	r3, #12
 8003d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
 8003da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003daa:	61fa      	str	r2, [r7, #28]
 8003dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	69b9      	ldr	r1, [r7, #24]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	617b      	str	r3, [r7, #20]
   return(result);
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e5      	bne.n	8003d8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003dbe:	e002      	b.n	8003dc6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003dc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003dc2:	f7ff ff8d 	bl	8003ce0 <HAL_UART_TxCpltCallback>
}
 8003dc6:	bf00      	nop
 8003dc8:	3740      	adds	r7, #64	; 0x40
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f7ff ff89 	bl	8003cf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003de2:	bf00      	nop
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b80      	cmp	r3, #128	; 0x80
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b21      	cmp	r3, #33	; 0x21
 8003e1c:	d108      	bne.n	8003e30 <UART_DMAError+0x46>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2200      	movs	r2, #0
 8003e28:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e2a:	68b8      	ldr	r0, [r7, #8]
 8003e2c:	f000 f865 	bl	8003efa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b22      	cmp	r3, #34	; 0x22
 8003e50:	d108      	bne.n	8003e64 <UART_DMAError+0x7a>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e5e:	68b8      	ldr	r0, [r7, #8]
 8003e60:	f000 f873 	bl	8003f4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f043 0210 	orr.w	r2, r3, #16
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e70:	68b8      	ldr	r0, [r7, #8]
 8003e72:	f7ff ff49 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	88fa      	ldrh	r2, [r7, #6]
 8003e96:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	88fa      	ldrh	r2, [r7, #6]
 8003e9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2222      	movs	r2, #34	; 0x22
 8003ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d007      	beq.n	8003ecc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b089      	sub	sp, #36	; 0x24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	61ba      	str	r2, [r7, #24]
 8003f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6979      	ldr	r1, [r7, #20]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003f3e:	bf00      	nop
 8003f40:	3724      	adds	r7, #36	; 0x24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b095      	sub	sp, #84	; 0x54
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	330c      	adds	r3, #12
 8003f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f72:	643a      	str	r2, [r7, #64]	; 0x40
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e5      	bne.n	8003f52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3314      	adds	r3, #20
 8003fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d119      	bne.n	8003ff6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f023 0310 	bic.w	r3, r3, #16
 8003fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	330c      	adds	r3, #12
 8003fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fe2:	61ba      	str	r2, [r7, #24]
 8003fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6979      	ldr	r1, [r7, #20]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e5      	bne.n	8003fc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004004:	bf00      	nop
 8004006:	3754      	adds	r7, #84	; 0x54
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff fe6c 	bl	8003d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b21      	cmp	r3, #33	; 0x21
 800404a:	d13e      	bne.n	80040ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004054:	d114      	bne.n	8004080 <UART_Transmit_IT+0x48>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d110      	bne.n	8004080 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004072:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]
 800407e:	e008      	b.n	8004092 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	1c59      	adds	r1, r3, #1
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6211      	str	r1, [r2, #32]
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29b      	uxth	r3, r3
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4619      	mov	r1, r3
 80040a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e000      	b.n	80040cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff fdf1 	bl	8003ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	; 0x30
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b22      	cmp	r3, #34	; 0x22
 800411a:	f040 80ab 	bne.w	8004274 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004126:	d117      	bne.n	8004158 <UART_Receive_IT+0x50>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d113      	bne.n	8004158 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004130:	2300      	movs	r3, #0
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	b29b      	uxth	r3, r3
 8004142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004146:	b29a      	uxth	r2, r3
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	1c9a      	adds	r2, r3, #2
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
 8004156:	e026      	b.n	80041a6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416a:	d007      	beq.n	800417c <UART_Receive_IT+0x74>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10a      	bne.n	800418a <UART_Receive_IT+0x82>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e008      	b.n	800419c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004196:	b2da      	uxtb	r2, r3
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4619      	mov	r1, r3
 80041b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d15a      	bne.n	8004270 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0220 	bic.w	r2, r2, #32
 80041c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d135      	bne.n	8004266 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	e853 3f00 	ldrex	r3, [r3]
 800420e:	613b      	str	r3, [r7, #16]
   return(result);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f023 0310 	bic.w	r3, r3, #16
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004220:	623a      	str	r2, [r7, #32]
 8004222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004224:	69f9      	ldr	r1, [r7, #28]
 8004226:	6a3a      	ldr	r2, [r7, #32]
 8004228:	e841 2300 	strex	r3, r2, [r1]
 800422c:	61bb      	str	r3, [r7, #24]
   return(result);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e5      	bne.n	8004200 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b10      	cmp	r3, #16
 8004240:	d10a      	bne.n	8004258 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff fd5c 	bl	8003d1c <HAL_UARTEx_RxEventCallback>
 8004264:	e002      	b.n	800426c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7fc fa94 	bl	8000794 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e002      	b.n	8004276 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3730      	adds	r7, #48	; 0x30
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004284:	b0c0      	sub	sp, #256	; 0x100
 8004286:	af00      	add	r7, sp, #0
 8004288:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	68d9      	ldr	r1, [r3, #12]
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	ea40 0301 	orr.w	r3, r0, r1
 80042a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	431a      	orrs	r2, r3
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042d8:	f021 010c 	bic.w	r1, r1, #12
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042e6:	430b      	orrs	r3, r1
 80042e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fa:	6999      	ldr	r1, [r3, #24]
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	ea40 0301 	orr.w	r3, r0, r1
 8004306:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b8f      	ldr	r3, [pc, #572]	; (800454c <UART_SetConfig+0x2cc>)
 8004310:	429a      	cmp	r2, r3
 8004312:	d005      	beq.n	8004320 <UART_SetConfig+0xa0>
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	4b8d      	ldr	r3, [pc, #564]	; (8004550 <UART_SetConfig+0x2d0>)
 800431c:	429a      	cmp	r2, r3
 800431e:	d104      	bne.n	800432a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004320:	f7ff f940 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 8004324:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004328:	e003      	b.n	8004332 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800432a:	f7ff f927 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 800432e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433c:	f040 810c 	bne.w	8004558 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004344:	2200      	movs	r2, #0
 8004346:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800434a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800434e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	1891      	adds	r1, r2, r2
 8004358:	65b9      	str	r1, [r7, #88]	; 0x58
 800435a:	415b      	adcs	r3, r3
 800435c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800435e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004362:	4621      	mov	r1, r4
 8004364:	eb12 0801 	adds.w	r8, r2, r1
 8004368:	4629      	mov	r1, r5
 800436a:	eb43 0901 	adc.w	r9, r3, r1
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800437a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800437e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004382:	4690      	mov	r8, r2
 8004384:	4699      	mov	r9, r3
 8004386:	4623      	mov	r3, r4
 8004388:	eb18 0303 	adds.w	r3, r8, r3
 800438c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004390:	462b      	mov	r3, r5
 8004392:	eb49 0303 	adc.w	r3, r9, r3
 8004396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043ae:	460b      	mov	r3, r1
 80043b0:	18db      	adds	r3, r3, r3
 80043b2:	653b      	str	r3, [r7, #80]	; 0x50
 80043b4:	4613      	mov	r3, r2
 80043b6:	eb42 0303 	adc.w	r3, r2, r3
 80043ba:	657b      	str	r3, [r7, #84]	; 0x54
 80043bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043c4:	f7fb ff00 	bl	80001c8 <__aeabi_uldivmod>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4b61      	ldr	r3, [pc, #388]	; (8004554 <UART_SetConfig+0x2d4>)
 80043ce:	fba3 2302 	umull	r2, r3, r3, r2
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	011c      	lsls	r4, r3, #4
 80043d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043e8:	4642      	mov	r2, r8
 80043ea:	464b      	mov	r3, r9
 80043ec:	1891      	adds	r1, r2, r2
 80043ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80043f0:	415b      	adcs	r3, r3
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043f8:	4641      	mov	r1, r8
 80043fa:	eb12 0a01 	adds.w	sl, r2, r1
 80043fe:	4649      	mov	r1, r9
 8004400:	eb43 0b01 	adc.w	fp, r3, r1
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004410:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004418:	4692      	mov	sl, r2
 800441a:	469b      	mov	fp, r3
 800441c:	4643      	mov	r3, r8
 800441e:	eb1a 0303 	adds.w	r3, sl, r3
 8004422:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004426:	464b      	mov	r3, r9
 8004428:	eb4b 0303 	adc.w	r3, fp, r3
 800442c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800443c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004440:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004444:	460b      	mov	r3, r1
 8004446:	18db      	adds	r3, r3, r3
 8004448:	643b      	str	r3, [r7, #64]	; 0x40
 800444a:	4613      	mov	r3, r2
 800444c:	eb42 0303 	adc.w	r3, r2, r3
 8004450:	647b      	str	r3, [r7, #68]	; 0x44
 8004452:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004456:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800445a:	f7fb feb5 	bl	80001c8 <__aeabi_uldivmod>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4611      	mov	r1, r2
 8004464:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <UART_SetConfig+0x2d4>)
 8004466:	fba3 2301 	umull	r2, r3, r3, r1
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	2264      	movs	r2, #100	; 0x64
 800446e:	fb02 f303 	mul.w	r3, r2, r3
 8004472:	1acb      	subs	r3, r1, r3
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800447a:	4b36      	ldr	r3, [pc, #216]	; (8004554 <UART_SetConfig+0x2d4>)
 800447c:	fba3 2302 	umull	r2, r3, r3, r2
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004488:	441c      	add	r4, r3
 800448a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004494:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004498:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	1891      	adds	r1, r2, r2
 80044a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80044a4:	415b      	adcs	r3, r3
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044ac:	4641      	mov	r1, r8
 80044ae:	1851      	adds	r1, r2, r1
 80044b0:	6339      	str	r1, [r7, #48]	; 0x30
 80044b2:	4649      	mov	r1, r9
 80044b4:	414b      	adcs	r3, r1
 80044b6:	637b      	str	r3, [r7, #52]	; 0x34
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044c4:	4659      	mov	r1, fp
 80044c6:	00cb      	lsls	r3, r1, #3
 80044c8:	4651      	mov	r1, sl
 80044ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ce:	4651      	mov	r1, sl
 80044d0:	00ca      	lsls	r2, r1, #3
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	4642      	mov	r2, r8
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e0:	464b      	mov	r3, r9
 80044e2:	460a      	mov	r2, r1
 80044e4:	eb42 0303 	adc.w	r3, r2, r3
 80044e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004500:	460b      	mov	r3, r1
 8004502:	18db      	adds	r3, r3, r3
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
 8004506:	4613      	mov	r3, r2
 8004508:	eb42 0303 	adc.w	r3, r2, r3
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004512:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004516:	f7fb fe57 	bl	80001c8 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <UART_SetConfig+0x2d4>)
 8004520:	fba3 1302 	umull	r1, r3, r3, r2
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	2164      	movs	r1, #100	; 0x64
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	3332      	adds	r3, #50	; 0x32
 8004532:	4a08      	ldr	r2, [pc, #32]	; (8004554 <UART_SetConfig+0x2d4>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	f003 0207 	and.w	r2, r3, #7
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4422      	add	r2, r4
 8004546:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004548:	e106      	b.n	8004758 <UART_SetConfig+0x4d8>
 800454a:	bf00      	nop
 800454c:	40011000 	.word	0x40011000
 8004550:	40011400 	.word	0x40011400
 8004554:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455c:	2200      	movs	r2, #0
 800455e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004562:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004566:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800456a:	4642      	mov	r2, r8
 800456c:	464b      	mov	r3, r9
 800456e:	1891      	adds	r1, r2, r2
 8004570:	6239      	str	r1, [r7, #32]
 8004572:	415b      	adcs	r3, r3
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800457a:	4641      	mov	r1, r8
 800457c:	1854      	adds	r4, r2, r1
 800457e:	4649      	mov	r1, r9
 8004580:	eb43 0501 	adc.w	r5, r3, r1
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	00eb      	lsls	r3, r5, #3
 800458e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004592:	00e2      	lsls	r2, r4, #3
 8004594:	4614      	mov	r4, r2
 8004596:	461d      	mov	r5, r3
 8004598:	4643      	mov	r3, r8
 800459a:	18e3      	adds	r3, r4, r3
 800459c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045a0:	464b      	mov	r3, r9
 80045a2:	eb45 0303 	adc.w	r3, r5, r3
 80045a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045c6:	4629      	mov	r1, r5
 80045c8:	008b      	lsls	r3, r1, #2
 80045ca:	4621      	mov	r1, r4
 80045cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d0:	4621      	mov	r1, r4
 80045d2:	008a      	lsls	r2, r1, #2
 80045d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045d8:	f7fb fdf6 	bl	80001c8 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b60      	ldr	r3, [pc, #384]	; (8004764 <UART_SetConfig+0x4e4>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	011c      	lsls	r4, r3, #4
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	61b9      	str	r1, [r7, #24]
 8004604:	415b      	adcs	r3, r3
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800460c:	4641      	mov	r1, r8
 800460e:	1851      	adds	r1, r2, r1
 8004610:	6139      	str	r1, [r7, #16]
 8004612:	4649      	mov	r1, r9
 8004614:	414b      	adcs	r3, r1
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004624:	4659      	mov	r1, fp
 8004626:	00cb      	lsls	r3, r1, #3
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462e:	4651      	mov	r1, sl
 8004630:	00ca      	lsls	r2, r1, #3
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	4603      	mov	r3, r0
 8004638:	4642      	mov	r2, r8
 800463a:	189b      	adds	r3, r3, r2
 800463c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004640:	464b      	mov	r3, r9
 8004642:	460a      	mov	r2, r1
 8004644:	eb42 0303 	adc.w	r3, r2, r3
 8004648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800464c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	67bb      	str	r3, [r7, #120]	; 0x78
 8004656:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004664:	4649      	mov	r1, r9
 8004666:	008b      	lsls	r3, r1, #2
 8004668:	4641      	mov	r1, r8
 800466a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800466e:	4641      	mov	r1, r8
 8004670:	008a      	lsls	r2, r1, #2
 8004672:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004676:	f7fb fda7 	bl	80001c8 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4611      	mov	r1, r2
 8004680:	4b38      	ldr	r3, [pc, #224]	; (8004764 <UART_SetConfig+0x4e4>)
 8004682:	fba3 2301 	umull	r2, r3, r3, r1
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2264      	movs	r2, #100	; 0x64
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	1acb      	subs	r3, r1, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a33      	ldr	r2, [pc, #204]	; (8004764 <UART_SetConfig+0x4e4>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a0:	441c      	add	r4, r3
 80046a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046a6:	2200      	movs	r2, #0
 80046a8:	673b      	str	r3, [r7, #112]	; 0x70
 80046aa:	677a      	str	r2, [r7, #116]	; 0x74
 80046ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	415b      	adcs	r3, r3
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046c0:	4641      	mov	r1, r8
 80046c2:	1851      	adds	r1, r2, r1
 80046c4:	6039      	str	r1, [r7, #0]
 80046c6:	4649      	mov	r1, r9
 80046c8:	414b      	adcs	r3, r1
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046d8:	4659      	mov	r1, fp
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4651      	mov	r1, sl
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4642      	mov	r2, r8
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f2:	464b      	mov	r3, r9
 80046f4:	460a      	mov	r2, r1
 80046f6:	eb42 0303 	adc.w	r3, r2, r3
 80046fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	663b      	str	r3, [r7, #96]	; 0x60
 8004706:	667a      	str	r2, [r7, #100]	; 0x64
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004714:	4649      	mov	r1, r9
 8004716:	008b      	lsls	r3, r1, #2
 8004718:	4641      	mov	r1, r8
 800471a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471e:	4641      	mov	r1, r8
 8004720:	008a      	lsls	r2, r1, #2
 8004722:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004726:	f7fb fd4f 	bl	80001c8 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <UART_SetConfig+0x4e4>)
 8004730:	fba3 1302 	umull	r1, r3, r3, r2
 8004734:	095b      	lsrs	r3, r3, #5
 8004736:	2164      	movs	r1, #100	; 0x64
 8004738:	fb01 f303 	mul.w	r3, r1, r3
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	3332      	adds	r3, #50	; 0x32
 8004742:	4a08      	ldr	r2, [pc, #32]	; (8004764 <UART_SetConfig+0x4e4>)
 8004744:	fba2 2303 	umull	r2, r3, r2, r3
 8004748:	095b      	lsrs	r3, r3, #5
 800474a:	f003 020f 	and.w	r2, r3, #15
 800474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4422      	add	r2, r4
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	bf00      	nop
 800475a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800475e:	46bd      	mov	sp, r7
 8004760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004764:	51eb851f 	.word	0x51eb851f

08004768 <memset>:
 8004768:	4402      	add	r2, r0
 800476a:	4603      	mov	r3, r0
 800476c:	4293      	cmp	r3, r2
 800476e:	d100      	bne.n	8004772 <memset+0xa>
 8004770:	4770      	bx	lr
 8004772:	f803 1b01 	strb.w	r1, [r3], #1
 8004776:	e7f9      	b.n	800476c <memset+0x4>

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	4d0d      	ldr	r5, [pc, #52]	; (80047b0 <__libc_init_array+0x38>)
 800477c:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 800477e:	1b64      	subs	r4, r4, r5
 8004780:	10a4      	asrs	r4, r4, #2
 8004782:	2600      	movs	r6, #0
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	4d0b      	ldr	r5, [pc, #44]	; (80047b8 <__libc_init_array+0x40>)
 800478a:	4c0c      	ldr	r4, [pc, #48]	; (80047bc <__libc_init_array+0x44>)
 800478c:	f000 f818 	bl	80047c0 <_init>
 8004790:	1b64      	subs	r4, r4, r5
 8004792:	10a4      	asrs	r4, r4, #2
 8004794:	2600      	movs	r6, #0
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08004800 	.word	0x08004800
 80047b4:	08004800 	.word	0x08004800
 80047b8:	08004800 	.word	0x08004800
 80047bc:	08004804 	.word	0x08004804

080047c0 <_init>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr

080047cc <_fini>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr
